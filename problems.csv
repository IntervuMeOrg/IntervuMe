Unnamed: 0,name,statement,difficulty,topics,tests_input_output,normalized_input,expected_output,python_stub,cpp_stub,java_stub,hidden_py_header,hidden_py_footer,hidden_cpp_header,hidden_cpp_footer,hidden_java_header,hidden_java_footer
1,Two Sum,"Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.
You can return the answer in any order.
Example 1:
Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].
Example 2:
Input: nums = [3,2,4], target = 6
Output: [1,2]
Example 3:
Input: nums = [3,3], target = 6
Output: [0,1]
Constraints:
2 <= nums.length <= 10^4
-10^9 <= nums[i] <= 10^9
-10^9 <= target <= 10^9
Only one valid answer exists.
Follow-up: Can you come up with an algorithm that is less than O(n^2)
time complexity?",Easy,"Array, Hash Table","Test Case 1:
Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].

Test Case 2:
Input: nums = [3,2,4], target = 6
Output: [1,2]

Test Case 3:
Input: nums = [3,3], target = 6
Output: [0,1]","4
2 7 11 15
9

3
3 2 4
6

2
3 3
6","[0,1]
[1,2]
[0,1]","class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        ","class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        
    }
};","class Solution {
    public int[] twoSum(int[] nums, int target) {
        
    }
}","import sys, json, math, itertools, collections","if __name__ == ""__main__"":
    data = sys.stdin.read().strip().splitlines()
    line_idx = 0

    n_nums = int(data[line_idx])
    line_idx += 1
    nums = list(map(int, data[line_idx].split()))
    line_idx += 1
    target = int(data[line_idx])
    line_idx += 1

    sol = Solution()
    ans = sol.twoSum(nums, target)

    if isinstance(ans, list):
        print(json.dumps(ans, separators=(',', ':')))
    elif isinstance(ans, bool):
        print('true' if ans else 'false')
    else:
        print(ans)","#include <bits/stdc++.h>
using namespace std;","int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int n_nums;
    if (!(cin >> n_nums)) return 0;
    vector<int> nums(n_nums);
    for (int i = 0; i < n_nums; ++i) cin >> nums[i];
    int target;
    if (!(cin >> target)) return 0;

    Solution sol;
    vector<int> ans = sol.twoSum(nums, target);
    cout << '[';
    for (size_t i = 0; i < ans.size(); ++i) {
        cout << ans[i] << (i + 1 == ans.size() ? ']' : ',');
    }
    cout << '\n';
    return 0;
}","import java.io.*;
import java.util.*;","public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        int n_nums = Integer.parseInt(br.readLine());
        st = new StringTokenizer(br.readLine());
        int[] nums = new int[n_nums];
        for (int i = 0; i < n_nums; i++) {
            nums[i] = Integer.parseInt(st.nextToken());
        }
        int target = Integer.parseInt(br.readLine());

        Solution sol = new Solution();
        int[] ans = sol.twoSum(nums, target);
        System.out.print(""["");
        for (int i = 0; i < ans.length; i++) {
            System.out.print(ans[i] + (i == ans.length - 1 ? ""]"" : "",""));
        }
        System.out.println();
    }
}"
2,Longest Substring Without Repeating Characters,"Given a string s, find the length of the longest substring without duplicate characters.
Example 1:
Input: s = ""abcabcbb""
Output: 3
Explanation: The answer is ""abc"", with the length of 3.
Example 2:
Input: s = ""bbbbb""
Output: 1
Explanation: The answer is ""b"", with the length of 1.
Example 3:
Input: s = ""pwwkew""
Output: 3
Explanation: The answer is ""wke"", with the length of 3. Notice that the answer must be a substring, ""pwke"" is a subsequence and not a substring.
Constraints:
0 <= s.length <= 5 * 10^4
s consists of English letters, digits, symbols and spaces.",Medium,"Hash Table, String, Sliding Window","Test Case 1:
Input: s = ""abcabcbb""
Output: 3
Explanation: The answer is ""abc"", with the length of 3.

Test Case 2:
Input: s = ""bbbbb""
Output: 1
Explanation: The answer is ""b"", with the length of 1.

Test Case 3:
Input: s = ""pwwkew""
Output: 3
Explanation: The answer is ""wke"", with the length of 3.
Notice that the answer must be a substring, ""pwke"" is a subsequence and not a substring.","abcabcbb

bbbbb

pwwkew","3
1
3","class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        ","class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        
    }
};","class Solution {
    public int lengthOfLongestSubstring(String s) {
        
    }
}","import sys, json, math, itertools, collections","if __name__ == ""__main__"":
    data = sys.stdin.read().strip().splitlines()
    line_idx = 0

    s = data[line_idx]
    line_idx += 1

    sol = Solution()
    ans = sol.lengthOfLongestSubstring(s)

    if isinstance(ans, list):
        print(json.dumps(ans, separators=(',', ':')))
    elif isinstance(ans, bool):
        print('true' if ans else 'false')
    else:
        print(ans)","#include <bits/stdc++.h>
using namespace std;","int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    string s;
    if (!(cin >> s)) return 0;

    Solution sol;
    auto ans = sol.lengthOfLongestSubstring(s);
    cout << ans;
    cout << '\n';
    return 0;
}","import java.io.*;
import java.util.*;","public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        String s = br.readLine();

        Solution sol = new Solution();
        var ans = sol.lengthOfLongestSubstring(s);
        System.out.print(ans);
        System.out.println();
    }
}"
3,Median of Two Sorted Arrays,"Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.
The overall run time complexity should be O(log (m+n)).
Example 1:
Input: nums1 = [1,3], nums2 = [2]
Output: 2.00000
Explanation: merged array = [1,2,3] and median is 2.
Example 2:
Input: nums1 = [1,2], nums2 = [3,4]
Output: 2.50000
Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.
Constraints:
nums1.length == m
nums2.length == n
0 <= m <= 1000^0 <= n <= 1000^1 <= m + n <= 2000
-10^6 <= nums1[i], nums2[i] <= 10^6",Hard,"Array, Binary Search, Divide and Conquer","Test Case 1:
Input: nums1 = [1,3], nums2 = [2]
Output: 2.00000
Explanation: merged array = [1,2,3] and median is 2.

Test Case 2:
Input: nums1 = [1,2], nums2 = [3,4]
Output: 2.50000
Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.","2
1 3
1
2

2
1 2
2
3 4","2.00000
2.50000","class Solution:
    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        ","class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        
    }
};","class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        
    }
}","import sys, json, math, itertools, collections","if __name__ == ""__main__"":
    data = sys.stdin.read().strip().splitlines()
    line_idx = 0

    n_nums1 = int(data[line_idx])
    line_idx += 1
    nums1 = list(map(int, data[line_idx].split()))
    line_idx += 1
    n_nums2 = int(data[line_idx])
    line_idx += 1
    nums2 = list(map(int, data[line_idx].split()))
    line_idx += 1

    sol = Solution()
    ans = sol.findMedianSortedArrays(nums1, nums2)

    if isinstance(ans, list):
        print(json.dumps(ans, separators=(',', ':')))
    elif isinstance(ans, bool):
        print('true' if ans else 'false')
    else:
        print(ans)","#include <bits/stdc++.h>
using namespace std;","int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int n_nums1;
    if (!(cin >> n_nums1)) return 0;
    vector<int> nums1(n_nums1);
    for (int i = 0; i < n_nums1; ++i) cin >> nums1[i];
    int n_nums2;
    if (!(cin >> n_nums2)) return 0;
    vector<int> nums2(n_nums2);
    for (int i = 0; i < n_nums2; ++i) cin >> nums2[i];

    Solution sol;
    auto ans = sol.findMedianSortedArrays(nums1, nums2);
    cout << ans;
    cout << '\n';
    return 0;
}","import java.io.*;
import java.util.*;","public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        int n_nums1 = Integer.parseInt(br.readLine());
        st = new StringTokenizer(br.readLine());
        int[] nums1 = new int[n_nums1];
        for (int i = 0; i < n_nums1; i++) {
            nums1[i] = Integer.parseInt(st.nextToken());
        }
        int n_nums2 = Integer.parseInt(br.readLine());
        st = new StringTokenizer(br.readLine());
        int[] nums2 = new int[n_nums2];
        for (int i = 0; i < n_nums2; i++) {
            nums2[i] = Integer.parseInt(st.nextToken());
        }

        Solution sol = new Solution();
        var ans = sol.findMedianSortedArrays(nums1, nums2);
        System.out.print(ans);
        System.out.println();
    }
}"
4,Longest Palindromic Substring,"Given a string s, return the longest palindromic substring in s.
Example 1:
Input: s = ""babad""
Output: ""bab""
Explanation: ""aba"" is also a valid answer.
Example 2:
Input: s = ""cbbd""
Output: ""bb""
Constraints:
1 <= s.length <= 1000
s consist of only digits and English letters.",Medium,"Two Pointers, String, Dynamic Programming","Test Case 1:
Input: s = ""babad""
Output: ""bab""
Explanation: ""aba"" is also a valid answer.

Test Case 2:
Input: s = ""cbbd""
Output: ""bb""","babad

cbbd","bab
bb","class Solution:
    def longestPalindrome(self, s: str) -> str:
        ","class Solution {
public:
    string longestPalindrome(string s) {
        
    }
};","class Solution {
    public String longestPalindrome(String s) {
        
    }
}","import sys, json, math, itertools, collections","if __name__ == ""__main__"":
    data = sys.stdin.read().strip().splitlines()
    line_idx = 0

    s = data[line_idx]
    line_idx += 1

    sol = Solution()
    ans = sol.longestPalindrome(s)

    if isinstance(ans, list):
        print(json.dumps(ans, separators=(',', ':')))
    elif isinstance(ans, bool):
        print('true' if ans else 'false')
    else:
        print(ans)","#include <bits/stdc++.h>
using namespace std;","int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    string s;
    if (!(cin >> s)) return 0;

    Solution sol;
    string ans = sol.longestPalindrome(s);
    cout << ans;
    cout << '\n';
    return 0;
}","import java.io.*;
import java.util.*;","public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        String s = br.readLine();

        Solution sol = new Solution();
        String ans = sol.longestPalindrome(s);
        System.out.print(ans);
        System.out.println();
    }
}"
5,Reverse Integer,"Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-2^31, 2^31 - 1], then return 0.
Assume the environment does not allow you to store 64-bit integers (signed or unsigned).
Example 1:
Input: x = 123
Output: 321
Example 2:
Input: x = -123
Output: -321
Example 3:
Input: x = 120
Output: 21
Constraints:
-2^31 <= x <= 2^31 - 1",Medium,Math,"Test Case 1:
Input: x = 123
Output: 321

Test Case 2:
Input: x = -123
Output: -321

Test Case 3:
Input: x = 120
Output: 21","123

-123

120","321
-321
21","class Solution:
    def reverse(self, x: int) -> int:
        ","class Solution {
public:
    int reverse(int x) {
        
    }
};","class Solution {
    public int reverse(int x) {
        
    }
}","import sys, json, math, itertools, collections","if __name__ == ""__main__"":
    data = sys.stdin.read().strip().splitlines()
    line_idx = 0

    x = int(data[line_idx])
    line_idx += 1

    sol = Solution()
    ans = sol.reverse(x)

    if isinstance(ans, list):
        print(json.dumps(ans, separators=(',', ':')))
    elif isinstance(ans, bool):
        print('true' if ans else 'false')
    else:
        print(ans)","#include <bits/stdc++.h>
using namespace std;","int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int x;
    if (!(cin >> x)) return 0;

    Solution sol;
    auto ans = sol.reverse(x);
    cout << ans;
    cout << '\n';
    return 0;
}","import java.io.*;
import java.util.*;","public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        int x = Integer.parseInt(br.readLine());

        Solution sol = new Solution();
        var ans = sol.reverse(x);
        System.out.print(ans);
        System.out.println();
    }
}"
6,Palindrome Number,"Given an integer x, return true if x is a palindrome, and false otherwise.
Example 1:
Input: x = 121
Output: true
Explanation: 121 reads as 121 from left to right and from right to left.
Example 2:
Input: x = -121
Output: false
Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.
Example 3:
Input: x = 10
Output: false
Explanation: Reads 01 from right to left. Therefore it is not a palindrome.
Constraints:
-2^31 <= x <= 2^31 - 1
Follow up: Could you solve it without converting the integer to a string?",Easy,Math,"Test Case 1:
Input: x = 121
Output: true
Explanation: 121 reads as 121 from left to right and from right to left.

Test Case 2:
Input: x = -121
Output: false
Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.

Test Case 3:
Input: x = 10
Output: false
Explanation: Reads 01 from right to left. Therefore it is not a palindrome.","121

-121

10","true
false
false","class Solution:
    def isPalindrome(self, x: int) -> bool:
        ","class Solution {
public:
    bool isPalindrome(int x) {
        
    }
};","class Solution {
    public boolean isPalindrome(int x) {
        
    }
}","import sys, json, math, itertools, collections","if __name__ == ""__main__"":
    data = sys.stdin.read().strip().splitlines()
    line_idx = 0

    x = int(data[line_idx])
    line_idx += 1

    sol = Solution()
    ans = sol.isPalindrome(x)

    if isinstance(ans, list):
        print(json.dumps(ans, separators=(',', ':')))
    elif isinstance(ans, bool):
        print('true' if ans else 'false')
    else:
        print(ans)","#include <bits/stdc++.h>
using namespace std;","int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int x;
    if (!(cin >> x)) return 0;

    Solution sol;
    bool ans = sol.isPalindrome(x);
    cout << (ans ? ""true"" : ""false"");
    cout << '\n';
    return 0;
}","import java.io.*;
import java.util.*;","public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        int x = Integer.parseInt(br.readLine());

        Solution sol = new Solution();
        boolean ans = sol.isPalindrome(x);
        System.out.print(ans ? ""true"" : ""false"");
        System.out.println();
    }
}"
7,Regular Expression Matching,"Given an input string s and a pattern p, implement regular expression matching with support for '.' and '*' where:
'.' Matches any single character.
'*' Matches zero or more of the preceding element.
The matching should cover the entire input string (not partial).
Example 1:
Input: s = ""aa"", p = ""a""
Output: false
Explanation: ""a"" does not match the entire string ""aa"".
Example 2:
Input: s = ""aa"", p = ""a*""
Output: true
Explanation: '*' means zero or more of the preceding element, 'a'. Therefore, by repeating 'a' once, it becomes ""aa"".
Example 3:
Input: s = ""ab"", p = "".*""
Output: true
Explanation: "".*"" means ""zero or more (*) of any character (.)"".
Constraints:
1 <= s.length <= 20
1 <= p.length <= 20
s contains only lowercase English letters.
p contains only lowercase English letters, '.', and '*'.
It is guaranteed for each appearance of the character '*', there will be a previous valid character to match.",Hard,"String, Dynamic Programming, Recursion","Test Case 1:
Input: s = ""aa"", p = ""a""
Output: false
Explanation: ""a"" does not match the entire string ""aa"".

Test Case 2:
Input: s = ""aa"", p = ""a*""
Output: true
Explanation: '*' means zero or more of the preceding element, 'a'. Therefore, by repeating 'a' once, it becomes ""aa"".

Test Case 3:
Input: s = ""ab"", p = "".*""
Output: true
Explanation: "".*"" means ""zero or more (*) of any character (.)"".","aa
a

aa
a*

ab
.*","false
true
true","class Solution:
    def isMatch(self, s: str, p: str) -> bool:
        ","class Solution {
public:
    bool isMatch(string s, string p) {
        
    }
};","class Solution {
    public boolean isMatch(String s, String p) {
        
    }
}","import sys, json, math, itertools, collections","if __name__ == ""__main__"":
    data = sys.stdin.read().strip().splitlines()
    line_idx = 0

    s = data[line_idx]
    line_idx += 1
    p = data[line_idx]
    line_idx += 1

    sol = Solution()
    ans = sol.isMatch(s, p)

    if isinstance(ans, list):
        print(json.dumps(ans, separators=(',', ':')))
    elif isinstance(ans, bool):
        print('true' if ans else 'false')
    else:
        print(ans)","#include <bits/stdc++.h>
using namespace std;","int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    string s;
    if (!(cin >> s)) return 0;
    string p;
    if (!(cin >> p)) return 0;

    Solution sol;
    bool ans = sol.isMatch(s, p);
    cout << (ans ? ""true"" : ""false"");
    cout << '\n';
    return 0;
}","import java.io.*;
import java.util.*;","public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        String s = br.readLine();
        String p = br.readLine();

        Solution sol = new Solution();
        boolean ans = sol.isMatch(s, p);
        System.out.print(ans ? ""true"" : ""false"");
        System.out.println();
    }
}"
8,Container With Most Water,"You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the i th line are (i, 0) and (i, height[i]).
Find two lines that together with the x-axis form a container, such that the container contains the most water.
Return the maximum amount of water a container can store.
Notice that you may not slant the container.
Example 1:
Input: height = [1,8,6,2,5,4,8,3,7]
Output: 49
Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.
Example 2:
Input: height = [1,1]
Output: 1
Constraints:
n == height.length
2 <= n <= 10^5
0 <= height[i] <= 10^4",Medium,"Array, Two Pointers, Greedy","Test Case 1:
Input: height = [1,8,6,2,5,4,8,3,7]
Output: 49
Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.

Test Case 2:
Input: height = [1,1]
Output: 1","9
1 8 6 2 5 4 8 3 7

2
1 1","49
1","class Solution:
    def maxArea(self, height: List[int]) -> int:
        ","class Solution {
public:
    int maxArea(vector<int>& height) {
        
    }
};","class Solution {
    public int maxArea(int[] height) {
        
    }
}","import sys, json, math, itertools, collections","if __name__ == ""__main__"":
    data = sys.stdin.read().strip().splitlines()
    line_idx = 0

    n_height = int(data[line_idx])
    line_idx += 1
    height = list(map(int, data[line_idx].split()))
    line_idx += 1

    sol = Solution()
    ans = sol.maxArea(height)

    if isinstance(ans, list):
        print(json.dumps(ans, separators=(',', ':')))
    elif isinstance(ans, bool):
        print('true' if ans else 'false')
    else:
        print(ans)","#include <bits/stdc++.h>
using namespace std;","int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int n_height;
    if (!(cin >> n_height)) return 0;
    vector<int> height(n_height);
    for (int i = 0; i < n_height; ++i) cin >> height[i];

    Solution sol;
    auto ans = sol.maxArea(height);
    cout << ans;
    cout << '\n';
    return 0;
}","import java.io.*;
import java.util.*;","public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        int n_height = Integer.parseInt(br.readLine());
        st = new StringTokenizer(br.readLine());
        int[] height = new int[n_height];
        for (int i = 0; i < n_height; i++) {
            height[i] = Integer.parseInt(st.nextToken());
        }

        Solution sol = new Solution();
        var ans = sol.maxArea(height);
        System.out.print(ans);
        System.out.println();
    }
}"
9,Longest Common Prefix,"Write a function to find the longest common prefix string amongst an array of strings.
If there is no common prefix, return an empty string """".
Example 1:
Input: strs = [""flower"",""flow"",""flight""]
Output: ""fl""
Example 2:
Input: strs = [""dog"",""racecar"",""car""]
Output: """"
Explanation: There is no common prefix among the input strings.
Constraints:
1 <= strs.length <= 200 
1 <= strs[i].length <= 200
strs[i] consists of only lowercase English letters if it is non-empty.",Easy,"String, Trie","Test Case 1:
Input: strs = [""flower"",""flow"",""flight""]
Output: ""fl""

Test Case 2:
Input: strs = [""dog"",""racecar"",""car""]
Output: """"
Explanation: There is no common prefix among the input strings.","[""flower"",""flow"",""flight""]

[""dog"",""racecar"",""car""]","fl
","class Solution:
    def longestCommonPrefix(self, strs: List[str]) -> str:
        ","class Solution {
public:
    string longestCommonPrefix(vector<string>& strs) {
        
    }
};","class Solution {
    public String longestCommonPrefix(String[] strs) {
        
    }
}","import sys, json, math, itertools, collections","if __name__ == ""__main__"":
    data = sys.stdin.read().strip().splitlines()
    line_idx = 0

    strs = data[line_idx]
    line_idx += 1

    sol = Solution()
    ans = sol.longestCommonPrefix(strs)

    if isinstance(ans, list):
        print(json.dumps(ans, separators=(',', ':')))
    elif isinstance(ans, bool):
        print('true' if ans else 'false')
    else:
        print(ans)","#include <bits/stdc++.h>
using namespace std;","int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    string strs;
    if (!(cin >> strs)) return 0;

    Solution sol;
    string ans = sol.longestCommonPrefix(strs);
    cout << ans;
    cout << '\n';
    return 0;
}","import java.io.*;
import java.util.*;","public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        String strs = br.readLine();

        Solution sol = new Solution();
        String ans = sol.longestCommonPrefix(strs);
        System.out.print(ans);
        System.out.println();
    }
}"
10,3Sum,"Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.
Notice that the solution set must not contain duplicate triplets.
Example 1:
Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Explanation:
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0. 
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0. 
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0. 
The distinct triplets are [-1,0,1] and [-1,-1,2]. 
Notice that the order of the output and the order of the triplets does not matter.
Example 2:
Input: nums = [0,1,1]
Output: []
Explanation: The only possible triplet does not sum up to 0.
Example 3:
Input: nums = [0,0,0]
Output: [[0,0,0]]
Explanation: The only possible triplet sums up to 0.
Constraints:
3 <= nums.length <= 3000
-10^5 <= nums[i] <= 10^5",Medium,"Array, Two Pointers, Sorting","Test Case 1:
Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Explanation: 
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
The distinct triplets are [-1,0,1] and [-1,-1,2].
Notice that the order of the output and the order of the triplets does not matter.

Test Case 2:
Input: nums = [0,1,1]
Output: []
Explanation: The only possible triplet does not sum up to 0.

Test Case 3:
Input: nums = [0,0,0]
Output: [[0,0,0]]
Explanation: The only possible triplet sums up to 0.","6
-1 0 1 2 -1 -4

3
0 1 1

3
0 0 0","[[-1,-1,2],[-1,0,1]]
[]
[[0,0,0]]","class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        ","class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        
    }
};","class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        
    }
}","import sys, json, math, itertools, collections","if __name__ == ""__main__"":
    data = sys.stdin.read().strip().splitlines()
    line_idx = 0

    n_nums = int(data[line_idx])
    line_idx += 1
    nums = list(map(int, data[line_idx].split()))
    line_idx += 1

    sol = Solution()
    ans = sol.threeSum(nums)

    if isinstance(ans, list):
        print(json.dumps(ans, separators=(',', ':')))
    elif isinstance(ans, bool):
        print('true' if ans else 'false')
    else:
        print(ans)","#include <bits/stdc++.h>
using namespace std;","int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int n_nums;
    if (!(cin >> n_nums)) return 0;
    vector<int> nums(n_nums);
    for (int i = 0; i < n_nums; ++i) cin >> nums[i];

    Solution sol;
    vector<vector<int>> ans = sol.threeSum(nums);
    cout << '[';
    for (size_t i = 0; i < ans.size(); ++i) {
        cout << '[';
        for (size_t j = 0; j < ans[i].size(); ++j) {
            cout << ans[i][j] << (j + 1 == ans[i].size() ? ']' : ',');
        }
        cout << (i + 1 == ans.size() ? ']' : ',');
    }
    cout << '\n';
    return 0;
}","import java.io.*;
import java.util.*;","public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        int n_nums = Integer.parseInt(br.readLine());
        st = new StringTokenizer(br.readLine());
        int[] nums = new int[n_nums];
        for (int i = 0; i < n_nums; i++) {
            nums[i] = Integer.parseInt(st.nextToken());
        }

        Solution sol = new Solution();
        int[] ans = sol.threeSum(nums);
        System.out.print(""["");
        for (int i = 0; i < ans.length; i++) {
            System.out.print(ans[i] + (i == ans.length - 1 ? ""]"" : "",""));
        }
        System.out.println();
    }
}"
11,3Sum Closest,"Given an integer array nums of length n and an integer target, find three integers in nums such that the sum is closest to target.
Return the sum of the three integers.
You may assume that each input would have exactly one solution.
Example 1:
Input: nums = [-1,2,1,-4], target = 1
Output: 2
Explanation: The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).
Example 2:
Input: nums = [0,0,0], target = 1
Output: 0
Explanation: The sum that is closest to the target is 0. (0 + 0 + 0 = 0).
Constraints:
3 <= nums.length <= 500
-1000 <= nums[i] <= 1000
-10^4 <= target <= 10^4",Medium,"Array, Two Pointers, Sorting","Test Case 1:
Input: nums = [-1,2,1,-4], target = 1
Output: 2
Explanation: The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).

Test Case 2:
Input: nums = [0,0,0], target = 1
Output: 0
Explanation: The sum that is closest to the target is 0. (0 + 0 + 0 = 0).","4
-1 2 1 -4
1

3
0 0 0
1","2
0","class Solution:
    def threeSumClosest(self, nums: List[int], target: int) -> int:
        ","class Solution {
public:
    int threeSumClosest(vector<int>& nums, int target) {
        
    }
};","class Solution {
    public int threeSumClosest(int[] nums, int target) {
        
    }
}","import sys, json, math, itertools, collections","if __name__ == ""__main__"":
    data = sys.stdin.read().strip().splitlines()
    line_idx = 0

    n_nums = int(data[line_idx])
    line_idx += 1
    nums = list(map(int, data[line_idx].split()))
    line_idx += 1
    target = int(data[line_idx])
    line_idx += 1

    sol = Solution()
    ans = sol.threeSumClosest(nums, target)

    if isinstance(ans, list):
        print(json.dumps(ans, separators=(',', ':')))
    elif isinstance(ans, bool):
        print('true' if ans else 'false')
    else:
        print(ans)","#include <bits/stdc++.h>
using namespace std;","int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int n_nums;
    if (!(cin >> n_nums)) return 0;
    vector<int> nums(n_nums);
    for (int i = 0; i < n_nums; ++i) cin >> nums[i];
    int target;
    if (!(cin >> target)) return 0;

    Solution sol;
    auto ans = sol.threeSumClosest(nums, target);
    cout << ans;
    cout << '\n';
    return 0;
}","import java.io.*;
import java.util.*;","public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        int n_nums = Integer.parseInt(br.readLine());
        st = new StringTokenizer(br.readLine());
        int[] nums = new int[n_nums];
        for (int i = 0; i < n_nums; i++) {
            nums[i] = Integer.parseInt(st.nextToken());
        }
        int target = Integer.parseInt(br.readLine());

        Solution sol = new Solution();
        var ans = sol.threeSumClosest(nums, target);
        System.out.print(ans);
        System.out.println();
    }
}"
12,4Sum,"Given an array nums of n integers, return an array of all the unique quadruplets
[nums[a], nums[b], nums[c], nums[d]] such that:
0 <= a, b, c, d < n
a, b, c, and d are distinct.
nums[a] + nums[b] + nums[c] + nums[d] == target
You may return the answer in any order.
Example 1:
Input: nums = [1,0,-1,0,-2,2], target = 0
Output: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]
Example 2:
Input: nums = [2,2,2,2,2], target = 8
Output: [[2,2,2,2]]
Constraints:
1 <= nums.length <= 200
-10^9 <= nums[i] <= 10^9
-10^9 <= target <= 10^9",Medium,"Array, Two Pointers, Sorting","Test Case 1:
Input: nums = [1,0,-1,0,-2,2], target = 0
Output: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]

Test Case 2:
Input: nums = [2,2,2,2,2], target = 8
Output: [[2,2,2,2]]","6
1 0 -1 0 -2 2
0

5
2 2 2 2 2
8","[[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]
[[2,2,2,2]]","class Solution:
    def fourSum(self, nums: List[int], target: int) -> List[List[int]]:
        ","class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        
    }
};","class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        
    }
}","import sys, json, math, itertools, collections","if __name__ == ""__main__"":
    data = sys.stdin.read().strip().splitlines()
    line_idx = 0

    n_nums = int(data[line_idx])
    line_idx += 1
    nums = list(map(int, data[line_idx].split()))
    line_idx += 1
    target = int(data[line_idx])
    line_idx += 1

    sol = Solution()
    ans = sol.fourSum(nums, target)

    if isinstance(ans, list):
        print(json.dumps(ans, separators=(',', ':')))
    elif isinstance(ans, bool):
        print('true' if ans else 'false')
    else:
        print(ans)","#include <bits/stdc++.h>
using namespace std;","int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int n_nums;
    if (!(cin >> n_nums)) return 0;
    vector<int> nums(n_nums);
    for (int i = 0; i < n_nums; ++i) cin >> nums[i];
    int target;
    if (!(cin >> target)) return 0;

    Solution sol;
    vector<vector<int>> ans = sol.fourSum(nums, target);
    cout << '[';
    for (size_t i = 0; i < ans.size(); ++i) {
        cout << '[';
        for (size_t j = 0; j < ans[i].size(); ++j) {
            cout << ans[i][j] << (j + 1 == ans[i].size() ? ']' : ',');
        }
        cout << (i + 1 == ans.size() ? ']' : ',');
    }
    cout << '\n';
    return 0;
}","import java.io.*;
import java.util.*;","public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        int n_nums = Integer.parseInt(br.readLine());
        st = new StringTokenizer(br.readLine());
        int[] nums = new int[n_nums];
        for (int i = 0; i < n_nums; i++) {
            nums[i] = Integer.parseInt(st.nextToken());
        }
        int target = Integer.parseInt(br.readLine());

        Solution sol = new Solution();
        int[] ans = sol.fourSum(nums, target);
        System.out.print(""["");
        for (int i = 0; i < ans.length; i++) {
            System.out.print(ans[i] + (i == ans.length - 1 ? ""]"" : "",""));
        }
        System.out.println();
    }
}"
13,Valid Parentheses,"Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.
An input string is valid if:
Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.
Example 1:
Input:
s = ""()""
Output:
true
Example 2:
Input:
s = ""()[]{}""
Output:
true
Example 3:
Input:
s = ""(]""
Output:
false
Example 4:
Input:
s = ""([])""
Output:
true
Constraints:
1 <= s.length <= 10^4
s consists of parentheses only '()[]{}'.",Easy,"String, Stack",,"()

()[]{}

(]

([])

))))

((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((())))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

{}{{}{}{}{}{}{}{}}{{}{}{}}

()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()[]{}{}{}{}{}{}{}{}{}[]

}

][","true
true
false
true
false
false
true
false
false","class Solution:
    def isValid(self, s: str) -> bool:
        ","class Solution {
public:
    bool isValid(string s) {
        
    }
};","class Solution {
    public boolean isValid(String s) {
        
    }
}","import sys, json, math, itertools, collections","if __name__ == ""__main__"":
    data = sys.stdin.read().strip().splitlines()
    line_idx = 0

    s = data[line_idx]
    line_idx += 1

    sol = Solution()
    ans = sol.isValid(s)

    if isinstance(ans, list):
        print(json.dumps(ans, separators=(',', ':')))
    elif isinstance(ans, bool):
        print('true' if ans else 'false')
    else:
        print(ans)","#include <bits/stdc++.h>
using namespace std;","int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    string s;
    if (!(cin >> s)) return 0;

    Solution sol;
    bool ans = sol.isValid(s);
    cout << (ans ? ""true"" : ""false"");
    cout << '\n';
    return 0;
}","import java.io.*;
import java.util.*;","public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        String s = br.readLine();

        Solution sol = new Solution();
        boolean ans = sol.isValid(s);
        System.out.print(ans ? ""true"" : ""false"");
        System.out.println();
    }
}"
14,Generate Parentheses,"Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.
Example 1:
Input: n = 3
Output: [""((()))"",""(()())"",""(())()"",""()(())"",""()()()""]
Example 2:
Input: n = 1
Output: [""()""]
Constraints:
1 <= n <= 8",Medium,"String, Dynamic Programming, Backtracking","Test Case 1:
Input: n = 3
Output: [""((()))"",""(()())"",""(())()"",""()(())"",""()()()""]

Test Case 2:
Input: n = 1
Output: [""()""]","3

1","[""((()))"",""(()())"",""(())()"",""()(())"",""()()()""]
[""()""]","class Solution:
    def generateParenthesis(self, n: int) -> List[str]:
        ","class Solution {
public:
    vector<string> generateParenthesis(int n) {
        
    }
};","class Solution {
    public List<String> generateParenthesis(int n) {
        
    }
}","import sys, json, math, itertools, collections","if __name__ == ""__main__"":
    data = sys.stdin.read().strip().splitlines()
    line_idx = 0

    n = int(data[line_idx])
    line_idx += 1

    sol = Solution()
    ans = sol.generateParenthesis(n)

    if isinstance(ans, list):
        print(json.dumps(ans, separators=(',', ':')))
    elif isinstance(ans, bool):
        print('true' if ans else 'false')
    else:
        print(ans)","#include <bits/stdc++.h>
using namespace std;","int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int n;
    if (!(cin >> n)) return 0;

    Solution sol;
    vector<string> ans = sol.generateParenthesis(n);

    cout << '[';
    for (size_t i = 0; i < ans.size(); ++i) {
        cout << '""' << ans[i] << '""' << (i + 1 == ans.size() ? ']' : ',');
    }
    cout << '
';
    return 0;
}","import java.io.*;
import java.util.*;","public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        int n = Integer.parseInt(br.readLine());

        Solution sol = new Solution();
        String ans = sol.generateParenthesis(n);
        System.out.print(ans);
        System.out.println();
    }
}"
15,Find the Index of the First Occurrence in a String,"Given two strings needle and haystack, return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.
Example 1:
Input: haystack = ""sadbutsad"", needle = ""sad""
Output: 0
Explanation: ""sad"" occurs at index 0 and 6. The first occurrence is at index 0, so we return 0.
Example 2:
Input: haystack = ""leetcode"", needle = ""leeto""
Output: -1
Explanation: ""leeto"" did not occur in ""leetcode"", so we return -1.
Constraints:
1 <= haystack.length, needle.length <= 10^4
haystack and needle consist of only lowercase English characters.",Easy,"Two Pointers, String, String Matching","Test Case 1:
Input: haystack = ""sadbutsad"", needle = ""sad""
Output: 0
Explanation: ""sad"" occurs at index 0 and 6.
The first occurrence is at index 0, so we return 0.

Test Case 2:
Input: haystack = ""leetcode"", needle = ""leeto""
Output: -1
Explanation: ""leeto"" did not occur in ""leetcode"", so we return -1.","sadbutsad
sad

leetcode
leeto","0
-1","class Solution:
    def strStr(self, haystack: str, needle: str) -> int:
        ","class Solution {
public:
    int strStr(string haystack, string needle) {
        
    }
};","class Solution {
    public int strStr(String haystack, String needle) {
        
    }
}","import sys, json, math, itertools, collections","if __name__ == ""__main__"":
    data = sys.stdin.read().strip().splitlines()
    line_idx = 0

    haystack = data[line_idx]
    line_idx += 1
    needle = data[line_idx]
    line_idx += 1

    sol = Solution()
    ans = sol.strStr(haystack, needle)

    if isinstance(ans, list):
        print(json.dumps(ans, separators=(',', ':')))
    elif isinstance(ans, bool):
        print('true' if ans else 'false')
    else:
        print(ans)","#include <bits/stdc++.h>
using namespace std;","int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    string haystack;
    if (!(cin >> haystack)) return 0;
    string needle;
    if (!(cin >> needle)) return 0;

    Solution sol;
    auto ans = sol.strStr(haystack, needle);
    cout << ans;
    cout << '\n';
    return 0;
}","import java.io.*;
import java.util.*;","public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        String haystack = br.readLine();
        String needle = br.readLine();

        Solution sol = new Solution();
        var ans = sol.strStr(haystack, needle);
        System.out.print(ans);
        System.out.println();
    }
}"
16,Divide Two Integers,"Given two integers dividend and divisor, divide two integers without using multiplication, division, and mod operator.
The integer division should truncate toward zero, which means losing its fractional part. For example, 8.345 would be truncated to 8, and -2.7335 would be truncated to -2.
Return the quotient after dividing dividend by divisor.
Note: Assume we are dealing with an environment that could only store integers within the 32-bit signed integer range: [-2^31, 2^31 - 1]. For this problem, if the quotient is strictly greater than 2^31 - 1, then return 2^31 - 1, and if the quotient is strictly less than -2^31, then return -2^31.
Example 1:
Input: dividend = 10, divisor = 3
Output: 3
Explanation: 10/3 = 3.33333.. which is truncated to 3.
Example 2:
Input: dividend = 7, divisor = -3
Output: -2
Explanation: 7/-3 = -2.33333.. which is truncated to -2.
Constraints:
-2^31 <= dividend, divisor <= 2^31 - 1
divisor != 0",Medium,"Math, Bit Manipulation","Test Case 1:
Input: dividend = 10, divisor = 3
Output: 3
Explanation: 10/3 = 3.33333.. which is truncated to 3.

Test Case 2:
Input: dividend = 7, divisor = -3
Output: -2
Explanation: 7/-3 = -2.33333.. which is truncated to -2.","10
3

7
-3","3
-2","class Solution:
    def divide(self, dividend: int, divisor: int) -> int:
        ","class Solution {
public:
    int divide(int dividend, int divisor) {
        
    }
};","class Solution {
    public int divide(int dividend, int divisor) {
        
    }
}","import sys, json, math, itertools, collections","if __name__ == ""__main__"":
    data = sys.stdin.read().strip().splitlines()
    line_idx = 0

    dividend = int(data[line_idx])
    line_idx += 1
    divisor = int(data[line_idx])
    line_idx += 1

    sol = Solution()
    ans = sol.divide(dividend, divisor)

    if isinstance(ans, list):
        print(json.dumps(ans, separators=(',', ':')))
    elif isinstance(ans, bool):
        print('true' if ans else 'false')
    else:
        print(ans)","#include <bits/stdc++.h>
using namespace std;","int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int dividend;
    if (!(cin >> dividend)) return 0;
    int divisor;
    if (!(cin >> divisor)) return 0;

    Solution sol;
    auto ans = sol.divide(dividend, divisor);
    cout << ans;
    cout << '\n';
    return 0;
}","import java.io.*;
import java.util.*;","public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        int dividend = Integer.parseInt(br.readLine());
        int divisor = Integer.parseInt(br.readLine());

        Solution sol = new Solution();
        var ans = sol.divide(dividend, divisor);
        System.out.print(ans);
        System.out.println();
    }
}"
17,Next Permutation,"A permutation of an array of integers is an arrangement of its members into a sequence or linear order.
For example, for arr = [1,2,3], the following are all the permutations of arr: [1,2,3], [1,3,2], [2, 1, 3], [2, 3, 1], [3,1,2], [3,2,1].
The next permutation of an array of integers is the next lexicographically greater permutation of its integer. More formally, if all the permutations of the array are sorted in one container according to their lexicographical order, then the next permutation of that array is the permutation that follows it in the sorted container. If such arrangement is not possible, the array must be rearranged as the lowest possible order (i.e., sorted in ascending order).
For example, the next permutation of arr = [1,2,3] is [1,3,2].
Similarly, the next permutation of arr = [2,3,1] is [3,1,2].
While the next permutation of arr = [3,2,1] is [1,2,3] because [3,2,1] does not have a lexicographical larger rearrangement.
Given an array of integers nums, find the next permutation of
nums.
The replacement must be in place and use only constant extra memory.
Example 1:
Input: nums = [1,2,3]
Output: [1,3,2]
Example 2:
Input: nums = [3,2,1]
Output: [1,2,3]
Example 3:
Input: nums = [1,1,5]
Output: [1,5,1]
Constraints:
1 <= nums.length <= 100
0 <= nums[i] <= 100",Medium,"Array, Two Pointers","Test Case 1:
Input: nums = [1,2,3]
Output: [1,3,2]

Test Case 2:
Input: nums = [3,2,1]
Output: [1,2,3]

Test Case 3:
Input: nums = [1,1,5]
Output: [1,5,1]","3
1 2 3

3
3 2 1

3
1 1 5","[1,3,2]
[1,2,3]
[1,5,1]","class Solution:
    def nextPermutation(self, nums: List[int]) -> None:
        """"""
        Do not return anything, modify nums in-place instead.
        """"""
        ","class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        
    }
};","class Solution {
    public void nextPermutation(int[] nums) {
        
    }
}","import sys, json, math, itertools, collections","if __name__ == ""__main__"":
    data = sys.stdin.read().strip().splitlines()
    line_idx = 0

    n_nums = int(data[line_idx])
    line_idx += 1
    nums = list(map(int, data[line_idx].split()))
    line_idx += 1

    sol = Solution()
    ans = sol.nextPermutation(nums)

    if isinstance(ans, list):
        print(json.dumps(ans, separators=(',', ':')))
    elif isinstance(ans, bool):
        print('true' if ans else 'false')
    else:
        print(ans)","#include <bits/stdc++.h>
using namespace std;","int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int n_nums;
    if (!(cin >> n_nums)) return 0;
    vector<int> nums(n_nums);
    for (int i = 0; i < n_nums; ++i) cin >> nums[i];

    Solution sol;
    sol.nextPermutation(nums);
    cout << '\n';
    return 0;
}","import java.io.*;
import java.util.*;","public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        int n_nums = Integer.parseInt(br.readLine());
        st = new StringTokenizer(br.readLine());
        int[] nums = new int[n_nums];
        for (int i = 0; i < n_nums; i++) {
            nums[i] = Integer.parseInt(st.nextToken());
        }

        Solution sol = new Solution();
        sol.nextPermutation(nums);
        System.out.println();
    }
}"
18,Longest Valid Parentheses,"Given a string containing just the characters '(' and ')', return the length of the longest valid (well-formed) parentheses substring.
Example 1:
Input: s = ""(()""
Output: 2
Explanation: The longest valid parentheses substring is ""()"".
Example 2:
Input: s = "")()())""
Output: 4
Explanation: The longest valid parentheses substring is ""()()"".
Example 3:
Input: s = """"
Output: 0
Constraints:
0 <= s.length <= 3 * 10^4
s[i] is '(', or ')'.",Hard,"String, Dynamic Programming, Stack","Test Case 1:
Input: s = ""(()""
Output: 2
Explanation: The longest valid parentheses substring is ""()"".

Test Case 2:
Input: s = "")()())""
Output: 4
Explanation: The longest valid parentheses substring is ""()()"".

Test Case 3:
Input: s = """"
Output: 0","(()

)()())

","2
4
0","class Solution:
    def longestValidParentheses(self, s: str) -> int:
        ","class Solution {
public:
    int longestValidParentheses(string s) {
        
    }
};","class Solution {
    public int longestValidParentheses(String s) {
        
    }
}","import sys, json, math, itertools, collections","if __name__ == ""__main__"":
    data = sys.stdin.read().strip().splitlines()
    line_idx = 0

    s = data[line_idx]
    line_idx += 1

    sol = Solution()
    ans = sol.longestValidParentheses(s)

    if isinstance(ans, list):
        print(json.dumps(ans, separators=(',', ':')))
    elif isinstance(ans, bool):
        print('true' if ans else 'false')
    else:
        print(ans)","#include <bits/stdc++.h>
using namespace std;","int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    string s;
    if (!(cin >> s)) return 0;

    Solution sol;
    auto ans = sol.longestValidParentheses(s);
    cout << ans;
    cout << '\n';
    return 0;
}","import java.io.*;
import java.util.*;","public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        String s = br.readLine();

        Solution sol = new Solution();
        var ans = sol.longestValidParentheses(s);
        System.out.print(ans);
        System.out.println();
    }
}"
19,Search in Rotated Sorted Array,"There is an integer array nums sorted in ascending order (with distinct values).
Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k ( 1 <= k < nums.length ) such that the resulting array is [nums[k], nums[k+1],..., nums[n-1], nums[0], nums[1],..., nums[k-1]] ( 0-indexed ). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].
Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.
You must write an algorithm with O(log n) runtime complexity.
Example 1:
Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4
Example 2:
Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1
Example 3:
Input: nums = [1], target = 0
Output: -1
Constraints:
1 <= nums.length <= 5000
-10^4 <= nums[i] <= 10^4
All values of nums are unique.
nums is an ascending array that is possibly rotated.
-10^4 <= target <= 10^4",Medium,"Array, Binary Search","Test Case 1:
Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4

Test Case 2:
Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1

Test Case 3:
Input: nums = [1], target = 0
Output: -1","7
4 5 6 7 0 1 2
0

7
4 5 6 7 0 1 2
3

1
1
0","4
-1
-1","class Solution:
    def search(self, nums: List[int], target: int) -> int:
        ","class Solution {
public:
    int search(vector<int>& nums, int target) {
        
    }
};","class Solution {
    public int search(int[] nums, int target) {
        
    }
}","import sys, json, math, itertools, collections","if __name__ == ""__main__"":
    data = sys.stdin.read().strip().splitlines()
    line_idx = 0

    n_nums = int(data[line_idx])
    line_idx += 1
    nums = list(map(int, data[line_idx].split()))
    line_idx += 1
    target = int(data[line_idx])
    line_idx += 1

    sol = Solution()
    ans = sol.search(nums, target)

    if isinstance(ans, list):
        print(json.dumps(ans, separators=(',', ':')))
    elif isinstance(ans, bool):
        print('true' if ans else 'false')
    else:
        print(ans)","#include <bits/stdc++.h>
using namespace std;","int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int n_nums;
    if (!(cin >> n_nums)) return 0;
    vector<int> nums(n_nums);
    for (int i = 0; i < n_nums; ++i) cin >> nums[i];
    int target;
    if (!(cin >> target)) return 0;

    Solution sol;
    auto ans = sol.search(nums, target);
    cout << ans;
    cout << '\n';
    return 0;
}","import java.io.*;
import java.util.*;","public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        int n_nums = Integer.parseInt(br.readLine());
        st = new StringTokenizer(br.readLine());
        int[] nums = new int[n_nums];
        for (int i = 0; i < n_nums; i++) {
            nums[i] = Integer.parseInt(st.nextToken());
        }
        int target = Integer.parseInt(br.readLine());

        Solution sol = new Solution();
        var ans = sol.search(nums, target);
        System.out.print(ans);
        System.out.println();
    }
}"
20,Find First and Last Position of Element in Sorted Array,"Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.
If target is not found in the array, return [-1, -1].
You must write an algorithm with O(log n) runtime complexity.
Example 1:
Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:
Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]
Example 3:
Input: nums = [], target = 0
Output: [-1,-1]
Constraints:
0 <= nums.length <= 10^5
-10^9 <= nums[i] <= 10^9
nums is a non-decreasing array.
-10^9 <= target <= 10^9",Medium,"Array, Binary Search","Test Case 1:
Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]

Test Case 2:
Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]

Test Case 3:
Input: nums = [], target = 0
Output: [-1,-1]","6
5 7 7 8 8 10
8

6
5 7 7 8 8 10
6

0
0","[3,4]
[-1,-1]
[-1,-1]","class Solution:
    def searchRange(self, nums: List[int], target: int) -> List[int]:
        ","class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        
    }
};","class Solution {
    public int[] searchRange(int[] nums, int target) {
        
    }
}","import sys, json, math, itertools, collections","if __name__ == ""__main__"":
    data = sys.stdin.read().strip().splitlines()
    line_idx = 0

    n_nums = int(data[line_idx])
    line_idx += 1
    nums = list(map(int, data[line_idx].split()))
    line_idx += 1
    target = int(data[line_idx])
    line_idx += 1

    sol = Solution()
    ans = sol.searchRange(nums, target)

    if isinstance(ans, list):
        print(json.dumps(ans, separators=(',', ':')))
    elif isinstance(ans, bool):
        print('true' if ans else 'false')
    else:
        print(ans)","#include <bits/stdc++.h>
using namespace std;","int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int n_nums;
    if (!(cin >> n_nums)) return 0;
    vector<int> nums(n_nums);
    for (int i = 0; i < n_nums; ++i) cin >> nums[i];
    int target;
    if (!(cin >> target)) return 0;

    Solution sol;
    vector<int> ans = sol.searchRange(nums, target);
    cout << '[';
    for (size_t i = 0; i < ans.size(); ++i) {
        cout << ans[i] << (i + 1 == ans.size() ? ']' : ',');
    }
    cout << '\n';
    return 0;
}","import java.io.*;
import java.util.*;","public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        int n_nums = Integer.parseInt(br.readLine());
        st = new StringTokenizer(br.readLine());
        int[] nums = new int[n_nums];
        for (int i = 0; i < n_nums; i++) {
            nums[i] = Integer.parseInt(st.nextToken());
        }
        int target = Integer.parseInt(br.readLine());

        Solution sol = new Solution();
        int[] ans = sol.searchRange(nums, target);
        System.out.print(""["");
        for (int i = 0; i < ans.length; i++) {
            System.out.print(ans[i] + (i == ans.length - 1 ? ""]"" : "",""));
        }
        System.out.println();
    }
}"
21,Search Insert Position,"Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.
You must write an algorithm with O(log n) runtime complexity.
Example 1:
Input: nums = [1,3,5,6], target = 5
Output: 2
Example 2:
Input: nums = [1,3,5,6], target = 2
Output: 1
Example 3:
Input: nums = [1,3,5,6], target = 7
Output: 4
Constraints:
1 <= nums.length <= 10^4
-10^4 <= nums[i] <= 10^4
nums contains distinct values sorted in ascending order.
-10^4 <= target <= 10^4",Easy,"Array, Binary Search","Test Case 1:
Input: nums = [1,3,5,6], target = 5
Output: 2

Test Case 2:
Input: nums = [1,3,5,6], target = 2
Output: 1

Test Case 3:
Input: nums = [1,3,5,6], target = 7
Output: 4","4
1 3 5 6
5

4
1 3 5 6
2

4
1 3 5 6
7","2
1
4","class Solution:
    def searchInsert(self, nums: List[int], target: int) -> int:
        ","class Solution {
public:
    int searchInsert(vector<int>& nums, int target) {
        
    }
};","class Solution {
    public int searchInsert(int[] nums, int target) {
        
    }
}","import sys, json, math, itertools, collections","if __name__ == ""__main__"":
    data = sys.stdin.read().strip().splitlines()
    line_idx = 0

    n_nums = int(data[line_idx])
    line_idx += 1
    nums = list(map(int, data[line_idx].split()))
    line_idx += 1
    target = int(data[line_idx])
    line_idx += 1

    sol = Solution()
    ans = sol.searchInsert(nums, target)

    if isinstance(ans, list):
        print(json.dumps(ans, separators=(',', ':')))
    elif isinstance(ans, bool):
        print('true' if ans else 'false')
    else:
        print(ans)","#include <bits/stdc++.h>
using namespace std;","int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int n_nums;
    if (!(cin >> n_nums)) return 0;
    vector<int> nums(n_nums);
    for (int i = 0; i < n_nums; ++i) cin >> nums[i];
    int target;
    if (!(cin >> target)) return 0;

    Solution sol;
    auto ans = sol.searchInsert(nums, target);
    cout << ans;
    cout << '\n';
    return 0;
}","import java.io.*;
import java.util.*;","public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        int n_nums = Integer.parseInt(br.readLine());
        st = new StringTokenizer(br.readLine());
        int[] nums = new int[n_nums];
        for (int i = 0; i < n_nums; i++) {
            nums[i] = Integer.parseInt(st.nextToken());
        }
        int target = Integer.parseInt(br.readLine());

        Solution sol = new Solution();
        var ans = sol.searchInsert(nums, target);
        System.out.print(ans);
        System.out.println();
    }
}"
22,Combination Sum,"Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. You may return the combinations in any order.
The same number may be chosen from candidates an unlimited number of times. Two combinations are unique if the frequency of at least one of the chosen numbers is different.
The test cases are generated such that the number of unique combinations that sum up to target is less than 150 combinations for the given input.
Example 1:
Input: candidates = [2,3,6,7], target = 7
Output: [[2,2,3],[7]]
Explanation:
2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times. 7 is a candidate, and 7 = 7. These are the only two combinations.
Example 2:
Input: candidates = [2,3,5], target = 8
Output: [[2,2,2,2],[2,3,3],[3,5]]
Example 3:
Input: candidates = [2], target = 1
Output: []
Constraints:
1 <= candidates.length <= 30
2 <= candidates[i] <= 40
All elements of candidates are distinct.
1 <= target <= 40",Medium,"Array, Backtracking","Test Case 1:
Input: candidates = [2,3,6,7], target = 7
Output: [[2,2,3],[7]]
Explanation:
2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.
7 is a candidate, and 7 = 7.
These are the only two combinations.

Test Case 2:
Input: candidates = [2,3,5], target = 8
Output: [[2,2,2,2],[2,3,3],[3,5]]

Test Case 3:
Input: candidates = [2], target = 1
Output: []","4
2 3 6 7
7

3
2 3 5
8

1
2
1","[[2,2,3],[7]]
[[2,2,2,2],[2,3,3],[3,5]]
[]","class Solution:
    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:
        ","class Solution {
public:
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        
    }
};","class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        
    }
}","import sys, json, math, itertools, collections","if __name__ == ""__main__"":
    data = sys.stdin.read().strip().splitlines()
    line_idx = 0

    n_candidates = int(data[line_idx])
    line_idx += 1
    candidates = list(map(int, data[line_idx].split()))
    line_idx += 1
    target = int(data[line_idx])
    line_idx += 1

    sol = Solution()
    ans = sol.combinationSum(candidates, target)

    if isinstance(ans, list):
        print(json.dumps(ans, separators=(',', ':')))
    elif isinstance(ans, bool):
        print('true' if ans else 'false')
    else:
        print(ans)","#include <bits/stdc++.h>
using namespace std;","int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int n_candidates;
    if (!(cin >> n_candidates)) return 0;
    vector<int> candidates(n_candidates);
    for (int i = 0; i < n_candidates; ++i) cin >> candidates[i];
    int target;
    if (!(cin >> target)) return 0;

    Solution sol;
    vector<vector<int>> ans = sol.combinationSum(candidates, target);
    cout << '[';
    for (size_t i = 0; i < ans.size(); ++i) {
        cout << '[';
        for (size_t j = 0; j < ans[i].size(); ++j) {
            cout << ans[i][j] << (j + 1 == ans[i].size() ? ']' : ',');
        }
        cout << (i + 1 == ans.size() ? ']' : ',');
    }
    cout << '\n';
    return 0;
}","import java.io.*;
import java.util.*;","public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        int n_candidates = Integer.parseInt(br.readLine());
        st = new StringTokenizer(br.readLine());
        int[] candidates = new int[n_candidates];
        for (int i = 0; i < n_candidates; i++) {
            candidates[i] = Integer.parseInt(st.nextToken());
        }
        int target = Integer.parseInt(br.readLine());

        Solution sol = new Solution();
        int[] ans = sol.combinationSum(candidates, target);
        System.out.print(""["");
        for (int i = 0; i < ans.length; i++) {
            System.out.print(ans[i] + (i == ans.length - 1 ? ""]"" : "",""));
        }
        System.out.println();
    }
}"
23,Combination Sum II,"Given a collection of candidate numbers ( candidates ) and a target number ( target ), find all unique combinations in candidates where the candidate numbers sum to target.
Each number in candidates may only be used once in the combination.
Note: The solution set must not contain duplicate combinations.
Example 1:
Input: candidates = [10,1,2,7,6,1,5], target = 8
Output:
[ [1,1,6], [1,2,5], [1,7], [2,6] ]
Example 2:
Input: candidates = [2,5,2,1,2], target = 5
Output:
[ [1,2,2], [5] ]
Constraints:
1 <= candidates.length <= 100
1 <= candidates[i] <= 50
1 <= target <= 30",Medium,"Array, Backtracking","Test Case 1:
Input: candidates = [10,1,2,7,6,1,5], target = 8
Output: 
[
[1,1,6],
[1,2,5],
[1,7],
[2,6]
]

Test Case 2:
Input: candidates = [2,5,2,1,2], target = 5
Output: 
[
[1,2,2],
[5]
]","7
10 1 2 7 6 1 5
8

5
2 5 2 1 2
5","[
[","class Solution:
    def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:
        ","class Solution {
public:
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        
    }
};","class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        
    }
}","import sys, json, math, itertools, collections","if __name__ == ""__main__"":
    data = sys.stdin.read().strip().splitlines()
    line_idx = 0

    n_candidates = int(data[line_idx])
    line_idx += 1
    candidates = list(map(int, data[line_idx].split()))
    line_idx += 1
    target = int(data[line_idx])
    line_idx += 1

    sol = Solution()
    ans = sol.combinationSum2(candidates, target)

    if isinstance(ans, list):
        print(json.dumps(ans, separators=(',', ':')))
    elif isinstance(ans, bool):
        print('true' if ans else 'false')
    else:
        print(ans)","#include <bits/stdc++.h>
using namespace std;","int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int n_candidates;
    if (!(cin >> n_candidates)) return 0;
    vector<int> candidates(n_candidates);
    for (int i = 0; i < n_candidates; ++i) cin >> candidates[i];
    int target;
    if (!(cin >> target)) return 0;

    Solution sol;
    vector<vector<int>> ans = sol.combinationSum2(candidates, target);
    cout << '[';
    for (size_t i = 0; i < ans.size(); ++i) {
        cout << '[';
        for (size_t j = 0; j < ans[i].size(); ++j) {
            cout << ans[i][j] << (j + 1 == ans[i].size() ? ']' : ',');
        }
        cout << (i + 1 == ans.size() ? ']' : ',');
    }
    cout << '\n';
    return 0;
}","import java.io.*;
import java.util.*;","public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        int n_candidates = Integer.parseInt(br.readLine());
        st = new StringTokenizer(br.readLine());
        int[] candidates = new int[n_candidates];
        for (int i = 0; i < n_candidates; i++) {
            candidates[i] = Integer.parseInt(st.nextToken());
        }
        int target = Integer.parseInt(br.readLine());

        Solution sol = new Solution();
        int[] ans = sol.combinationSum2(candidates, target);
        System.out.print(""["");
        for (int i = 0; i < ans.length; i++) {
            System.out.print(ans[i] + (i == ans.length - 1 ? ""]"" : "",""));
        }
        System.out.println();
    }
}"
24,First Missing Positive,"Given an unsorted integer array nums. Return the smallest positive integer that is not present in nums.
You must implement an algorithm that runs in O(n) time and uses O(1) auxiliary space.
Example 1:
Input: nums = [1,2,0]
Output: 3
Explanation: The numbers in the range [1,2] are all in the array.
Example 2:
Input: nums = [3,4,-1,1]
Output: 2
Explanation: 1 is in the array but 2 is missing.
Example 3:
Input: nums = [7,8,9,11,12]
Output: 1
Explanation: The smallest positive integer 1 is missing.
Constraints:
1 <= nums.length <= 10^5
-2^31 <= nums[i] <= 2^31 - 1",Hard,"Array, Hash Table","Test Case 1:
Input: nums = [1,2,0]
Output: 3
Explanation: The numbers in the range [1,2] are all in the array.

Test Case 2:
Input: nums = [3,4,-1,1]
Output: 2
Explanation: 1 is in the array but 2 is missing.

Test Case 3:
Input: nums = [7,8,9,11,12]
Output: 1
Explanation: The smallest positive integer 1 is missing.","3
1 2 0

4
3 4 -1 1

5
7 8 9 11 12","3
2
1","class Solution:
    def firstMissingPositive(self, nums: List[int]) -> int:
        ","class Solution {
public:
    int firstMissingPositive(vector<int>& nums) {
        
    }
};","class Solution {
    public int firstMissingPositive(int[] nums) {
        
    }
}","import sys, json, math, itertools, collections","if __name__ == ""__main__"":
    data = sys.stdin.read().strip().splitlines()
    line_idx = 0

    n_nums = int(data[line_idx])
    line_idx += 1
    nums = list(map(int, data[line_idx].split()))
    line_idx += 1

    sol = Solution()
    ans = sol.firstMissingPositive(nums)

    if isinstance(ans, list):
        print(json.dumps(ans, separators=(',', ':')))
    elif isinstance(ans, bool):
        print('true' if ans else 'false')
    else:
        print(ans)","#include <bits/stdc++.h>
using namespace std;","int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int n_nums;
    if (!(cin >> n_nums)) return 0;
    vector<int> nums(n_nums);
    for (int i = 0; i < n_nums; ++i) cin >> nums[i];

    Solution sol;
    auto ans = sol.firstMissingPositive(nums);
    cout << ans;
    cout << '\n';
    return 0;
}","import java.io.*;
import java.util.*;","public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        int n_nums = Integer.parseInt(br.readLine());
        st = new StringTokenizer(br.readLine());
        int[] nums = new int[n_nums];
        for (int i = 0; i < n_nums; i++) {
            nums[i] = Integer.parseInt(st.nextToken());
        }

        Solution sol = new Solution();
        var ans = sol.firstMissingPositive(nums);
        System.out.print(ans);
        System.out.println();
    }
}"
25,Trapping Rain Water,"Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.
Example 1:
Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.
Example 2:
Input: height = [4,2,0,3,2,5]
Output: 9
Constraints:
n == height.length
1 <= n <= 2 * 10^4
0 <= height[i] <= 10^5",Hard,"Array, Two Pointers, Dynamic Programming, Stack, Monotonic Stack","Test Case 1:
Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.

Test Case 2:
Input: height = [4,2,0,3,2,5]
Output: 9","12
0 1 0 2 1 0 1 3 2 1 2 1

6
4 2 0 3 2 5","6
9","class Solution:
    def trap(self, height: List[int]) -> int:
        ","class Solution {
public:
    int trap(vector<int>& height) {
        
    }
};","class Solution {
    public int trap(int[] height) {
        
    }
}","import sys, json, math, itertools, collections","if __name__ == ""__main__"":
    data = sys.stdin.read().strip().splitlines()
    line_idx = 0

    n_height = int(data[line_idx])
    line_idx += 1
    height = list(map(int, data[line_idx].split()))
    line_idx += 1

    sol = Solution()
    ans = sol.trap(height)

    if isinstance(ans, list):
        print(json.dumps(ans, separators=(',', ':')))
    elif isinstance(ans, bool):
        print('true' if ans else 'false')
    else:
        print(ans)","#include <bits/stdc++.h>
using namespace std;","int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int n_height;
    if (!(cin >> n_height)) return 0;
    vector<int> height(n_height);
    for (int i = 0; i < n_height; ++i) cin >> height[i];

    Solution sol;
    auto ans = sol.trap(height);
    cout << ans;
    cout << '\n';
    return 0;
}","import java.io.*;
import java.util.*;","public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        int n_height = Integer.parseInt(br.readLine());
        st = new StringTokenizer(br.readLine());
        int[] height = new int[n_height];
        for (int i = 0; i < n_height; i++) {
            height[i] = Integer.parseInt(st.nextToken());
        }

        Solution sol = new Solution();
        var ans = sol.trap(height);
        System.out.print(ans);
        System.out.println();
    }
}"
26,Multiply Strings,"Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string.
Note: You must not use any built-in BigInteger library or convert the inputs to integer directly.
Example 1:
Input: num1 = ""2"", num2 = ""3""
Output: ""6""
Example 2:
Input: num1 = ""123"", num2 = ""456""
Output: ""56088""
Constraints:
1 <= num1.length, num2.length <= 200
num1 and num2 consist of digits only.
Both num1 and num2 do not contain any leading zero, except the number 0 itself.",Medium,"Math, String, Simulation","Test Case 1:
Input: num1 = ""2"", num2 = ""3""
Output: ""6""

Test Case 2:
Input: num1 = ""123"", num2 = ""456""
Output: ""56088""","2
3

123
456","6
56088","class Solution:
    def multiply(self, num1: str, num2: str) -> str:
        ","class Solution {
public:
    string multiply(string num1, string num2) {
        
    }
};","class Solution {
    public String multiply(String num1, String num2) {
        
    }
}","import sys, json, math, itertools, collections","if __name__ == ""__main__"":
    data = sys.stdin.read().strip().splitlines()
    line_idx = 0

    num1 = data[line_idx]
    line_idx += 1
    num2 = data[line_idx]
    line_idx += 1

    sol = Solution()
    ans = sol.multiply(num1, num2)

    if isinstance(ans, list):
        print(json.dumps(ans, separators=(',', ':')))
    elif isinstance(ans, bool):
        print('true' if ans else 'false')
    else:
        print(ans)","#include <bits/stdc++.h>
using namespace std;","int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    string num1;
    if (!(cin >> num1)) return 0;
    string num2;
    if (!(cin >> num2)) return 0;

    Solution sol;
    string ans = sol.multiply(num1, num2);
    cout << ans;
    cout << '\n';
    return 0;
}","import java.io.*;
import java.util.*;","public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        String num1 = br.readLine();
        String num2 = br.readLine();

        Solution sol = new Solution();
        String ans = sol.multiply(num1, num2);
        System.out.print(ans);
        System.out.println();
    }
}"
27,Wildcard Matching,"Given an input string ( s ) and a pattern ( p ), implement wildcard pattern matching with support for '?' and '*' where:
'?' Matches any single character.
'*' Matches any sequence of characters (including the empty sequence).
The matching should cover the entire input string (not partial).
Example 1:
Input: s = ""aa"", p = ""a""
Output: false
Explanation: ""a"" does not match the entire string ""aa"".
Example 2:
Input: s = ""aa"", p = ""*""
Output: true
Explanation: '*' matches any sequence.
Example 3:
Input: s = ""cb"", p = ""?a""
Output: false
Explanation: '?' matches 'c', but the second letter is 'a', which does not match 'b'.
Constraints:
0 <= s.length, p.length <= 2000
s contains only lowercase English letters.
p contains only lowercase English letters, '?' or '*'.",Hard,"String, Dynamic Programming, Greedy, Recursion","Test Case 1:
Input: s = ""aa"", p = ""a""
Output: false
Explanation: ""a"" does not match the entire string ""aa"".

Test Case 2:
Input: s = ""aa"", p = ""*""
Output: true
Explanation: '*' matches any sequence.

Test Case 3:
Input: s = ""cb"", p = ""?a""
Output: false
Explanation: '?' matches 'c', but the second letter is 'a', which does not match 'b'.","aa
a

aa
*

cb
?a","false
true
false","class Solution:
    def isMatch(self, s: str, p: str) -> bool:
        ","class Solution {
public:
    bool isMatch(string s, string p) {
        
    }
};","class Solution {
    public boolean isMatch(String s, String p) {
        
    }
}","import sys, json, math, itertools, collections","if __name__ == ""__main__"":
    data = sys.stdin.read().strip().splitlines()
    line_idx = 0

    s = data[line_idx]
    line_idx += 1
    p = data[line_idx]
    line_idx += 1

    sol = Solution()
    ans = sol.isMatch(s, p)

    if isinstance(ans, list):
        print(json.dumps(ans, separators=(',', ':')))
    elif isinstance(ans, bool):
        print('true' if ans else 'false')
    else:
        print(ans)","#include <bits/stdc++.h>
using namespace std;","int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    string s;
    if (!(cin >> s)) return 0;
    string p;
    if (!(cin >> p)) return 0;

    Solution sol;
    bool ans = sol.isMatch(s, p);
    cout << (ans ? ""true"" : ""false"");
    cout << '\n';
    return 0;
}","import java.io.*;
import java.util.*;","public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        String s = br.readLine();
        String p = br.readLine();

        Solution sol = new Solution();
        boolean ans = sol.isMatch(s, p);
        System.out.print(ans ? ""true"" : ""false"");
        System.out.println();
    }
}"
28,Jump Game II,"You are given a 0-indexed array of integers nums of length n. You are initially positioned at nums[0].
Each element nums[i] represents the maximum length of a forward jump from index i. In other words, if you are at nums[i], you can jump to any nums[i + j] where:
0 <= j <= nums[i] and
i + j < n
Return the minimum number of jumps to reach nums[n - 1]. The test cases are generated such that you can reach nums[n - 1].
Example 1:
Input: nums = [2,3,1,1,4]
Output: 2
Explanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.
Example 2:
Input: nums = [2,3,0,1,4]
Output: 2
Constraints:
1 <= nums.length <= 10^4
0 <= nums[i] <= 1000
It's guaranteed that you can reach nums[n - 1].",Medium,"Array, Dynamic Programming, Greedy","Test Case 1:
Input: nums = [2,3,1,1,4]
Output: 2
Explanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.

Test Case 2:
Input: nums = [2,3,0,1,4]
Output: 2","5
2 3 1 1 4

5
2 3 0 1 4","2
2","class Solution:
    def jump(self, nums: List[int]) -> int:
        ","class Solution {
public:
    int jump(vector<int>& nums) {
        
    }
};","class Solution {
    public int jump(int[] nums) {
        
    }
}","import sys, json, math, itertools, collections","if __name__ == ""__main__"":
    data = sys.stdin.read().strip().splitlines()
    line_idx = 0

    n_nums = int(data[line_idx])
    line_idx += 1
    nums = list(map(int, data[line_idx].split()))
    line_idx += 1

    sol = Solution()
    ans = sol.jump(nums)

    if isinstance(ans, list):
        print(json.dumps(ans, separators=(',', ':')))
    elif isinstance(ans, bool):
        print('true' if ans else 'false')
    else:
        print(ans)","#include <bits/stdc++.h>
using namespace std;","int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int n_nums;
    if (!(cin >> n_nums)) return 0;
    vector<int> nums(n_nums);
    for (int i = 0; i < n_nums; ++i) cin >> nums[i];

    Solution sol;
    auto ans = sol.jump(nums);
    cout << ans;
    cout << '\n';
    return 0;
}","import java.io.*;
import java.util.*;","public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        int n_nums = Integer.parseInt(br.readLine());
        st = new StringTokenizer(br.readLine());
        int[] nums = new int[n_nums];
        for (int i = 0; i < n_nums; i++) {
            nums[i] = Integer.parseInt(st.nextToken());
        }

        Solution sol = new Solution();
        var ans = sol.jump(nums);
        System.out.print(ans);
        System.out.println();
    }
}"
29,Permutations,"Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.
Example 1:
Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
Example 2:
Input: nums = [0,1]
Output: [[0,1],[1,0]]
Example 3:
Input: nums = [1]
Output: [[1]]
Constraints:
1 <= nums.length <= 6
-10 <= nums[i] <= 10
All the integers of nums are unique.",Medium,"Array, Backtracking","Test Case 1:
Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]

Test Case 2:
Input: nums = [0,1]
Output: [[0,1],[1,0]]

Test Case 3:
Input: nums = [1]
Output: [[1]]","3
1 2 3

2
0 1

1
1","[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
[[0,1],[1,0]]
[[1]]","class Solution:
    def permute(self, nums: List[int]) -> List[List[int]]:
        ","class Solution {
public:
    vector<vector<int>> permute(vector<int>& nums) {
        
    }
};","class Solution {
    public List<List<Integer>> permute(int[] nums) {
        
    }
}","import sys, json, math, itertools, collections","if __name__ == ""__main__"":
    data = sys.stdin.read().strip().splitlines()
    line_idx = 0

    n_nums = int(data[line_idx])
    line_idx += 1
    nums = list(map(int, data[line_idx].split()))
    line_idx += 1

    sol = Solution()
    ans = sol.permute(nums)

    if isinstance(ans, list):
        print(json.dumps(ans, separators=(',', ':')))
    elif isinstance(ans, bool):
        print('true' if ans else 'false')
    else:
        print(ans)","#include <bits/stdc++.h>
using namespace std;","int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int n_nums;
    if (!(cin >> n_nums)) return 0;
    vector<int> nums(n_nums);
    for (int i = 0; i < n_nums; ++i) cin >> nums[i];

    Solution sol;
    vector<vector<int>> ans = sol.permute(nums);
    cout << '[';
    for (size_t i = 0; i < ans.size(); ++i) {
        cout << '[';
        for (size_t j = 0; j < ans[i].size(); ++j) {
            cout << ans[i][j] << (j + 1 == ans[i].size() ? ']' : ',');
        }
        cout << (i + 1 == ans.size() ? ']' : ',');
    }
    cout << '\n';
    return 0;
}","import java.io.*;
import java.util.*;","public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        int n_nums = Integer.parseInt(br.readLine());
        st = new StringTokenizer(br.readLine());
        int[] nums = new int[n_nums];
        for (int i = 0; i < n_nums; i++) {
            nums[i] = Integer.parseInt(st.nextToken());
        }

        Solution sol = new Solution();
        int[] ans = sol.permute(nums);
        System.out.print(""["");
        for (int i = 0; i < ans.length; i++) {
            System.out.print(ans[i] + (i == ans.length - 1 ? ""]"" : "",""));
        }
        System.out.println();
    }
}"
30,Permutations II,"Given a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order.
Example 1:
Input: nums = [1,1,2]
Output:
[[1,1,2], [1,2,1], [2,1,1]]
Example 2:
Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
Constraints:
1 <= nums.length <= 8
-10 <= nums[i] <= 10",Medium,"Array, Backtracking, Sorting","Test Case 1:
Input: nums = [1,1,2]
Output:
[[1,1,2],
 [1,2,1],
 [2,1,1]]

Test Case 2:
Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]","3
1 1 2

3
1 2 3","[[1,1,2],
[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]","class Solution:
    def permuteUnique(self, nums: List[int]) -> List[List[int]]:
        ","class Solution {
public:
    vector<vector<int>> permuteUnique(vector<int>& nums) {
        
    }
};","class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        
    }
}","import sys, json, math, itertools, collections","if __name__ == ""__main__"":
    data = sys.stdin.read().strip().splitlines()
    line_idx = 0

    n_nums = int(data[line_idx])
    line_idx += 1
    nums = list(map(int, data[line_idx].split()))
    line_idx += 1

    sol = Solution()
    ans = sol.permuteUnique(nums)

    if isinstance(ans, list):
        print(json.dumps(ans, separators=(',', ':')))
    elif isinstance(ans, bool):
        print('true' if ans else 'false')
    else:
        print(ans)","#include <bits/stdc++.h>
using namespace std;","int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int n_nums;
    if (!(cin >> n_nums)) return 0;
    vector<int> nums(n_nums);
    for (int i = 0; i < n_nums; ++i) cin >> nums[i];

    Solution sol;
    vector<vector<int>> ans = sol.permuteUnique(nums);
    cout << '[';
    for (size_t i = 0; i < ans.size(); ++i) {
        cout << '[';
        for (size_t j = 0; j < ans[i].size(); ++j) {
            cout << ans[i][j] << (j + 1 == ans[i].size() ? ']' : ',');
        }
        cout << (i + 1 == ans.size() ? ']' : ',');
    }
    cout << '\n';
    return 0;
}","import java.io.*;
import java.util.*;","public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        int n_nums = Integer.parseInt(br.readLine());
        st = new StringTokenizer(br.readLine());
        int[] nums = new int[n_nums];
        for (int i = 0; i < n_nums; i++) {
            nums[i] = Integer.parseInt(st.nextToken());
        }

        Solution sol = new Solution();
        int[] ans = sol.permuteUnique(nums);
        System.out.print(""["");
        for (int i = 0; i < ans.length; i++) {
            System.out.print(ans[i] + (i == ans.length - 1 ? ""]"" : "",""));
        }
        System.out.println();
    }
}"
31,Rotate Image,"You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).
You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.
Example 1:
Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [[7,4,1],[8,5,2],[9,6,3]]
Example 2:
Input: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]
Output: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]
Constraints:
n == matrix.length == matrix[i].length
1 <= n <= 20
-1000 <= matrix[i][j] <= 1000",Medium,"Array, Math, Matrix","Test Case 1:
Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [[7,4,1],[8,5,2],[9,6,3]]

Test Case 2:
Input: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]
Output: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]","3 3
1 2 3
4 5 6
7 8 9

4 4
5 1 9 11
2 4 8 10
13 3 6 7
15 14 12 16","[[7,4,1],[8,5,2],[9,6,3]]
[[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]","class Solution:
    def rotate(self, matrix: List[List[int]]) -> None:
        """"""
        Do not return anything, modify matrix in-place instead.
        """"""
        ","class Solution {
public:
    void rotate(vector<vector<int>>& matrix) {
        
    }
};","class Solution {
    public void rotate(int[][] matrix) {
        
    }
}","import sys, json, math, itertools, collections","if __name__ == ""__main__"":
    data = sys.stdin.read().strip().splitlines()
    line_idx = 0

    n_matrix = int(data[line_idx])
    line_idx += 1
    matrix = list(map(int, data[line_idx].split()))
    line_idx += 1

    sol = Solution()
    ans = sol.rotate(matrix)

    if isinstance(ans, list):
        print(json.dumps(ans, separators=(',', ':')))
    elif isinstance(ans, bool):
        print('true' if ans else 'false')
    else:
        print(ans)","#include <bits/stdc++.h>
using namespace std;","int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int m_matrix, n_matrix;
    if (!(cin >> m_matrix >> n_matrix)) return 0;
    vector<vector<int>> matrix(m_matrix, vector<int>(n_matrix));
    for (int i = 0; i < m_matrix; ++i) {
        for (int j = 0; j < n_matrix; ++j) {
            cin >> matrix[i][j];
        }
    }

    Solution sol;
    sol.rotate(matrix);
    cout << '[';
    for (size_t i = 0; i < matrix.size(); ++i) {
        cout << '[';
        for (size_t j = 0; j < matrix[i].size(); ++j) {
            cout << matrix[i][j] << (j + 1 == matrix[i].size() ? ']' : ',');
        }
        cout << (i + 1 == matrix.size() ? ']' : ',');
    }
    cout << '\n';
    return 0;
}","import java.io.*;
import java.util.*;","public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        int n_matrix = Integer.parseInt(br.readLine());
        st = new StringTokenizer(br.readLine());
        int[] matrix = new int[n_matrix];
        for (int i = 0; i < n_matrix; i++) {
            matrix[i] = Integer.parseInt(st.nextToken());
        }

        Solution sol = new Solution();
        sol.rotate(matrix);
        System.out.println();
    }
}"
32,"Pow(x, n)","Implement pow(x, n), which calculates x raised to the power n (i.e., x^n ).
Example 1:
Input: x = 2.00000, n = 10
Output: 1024.00000
Example 2:
Input: x = 2.10000, n = 3
Output: 9.26100
Example 3:
Input: x = 2.00000, n = -2
Output: 0.25000
Explanation: 2 -2 = 1/2^2 = 1/4 = 0.25
Constraints:
-100.0 < x < 100.0
-2^31 <= n <= 2^31 -1
n is an integer.
Either x is not zero or n > 0.
-10^4 <= x^n <= 10^4",Medium,"Math, Recursion","Test Case 1:
Input: x = 2.00000, n = 10
Output: 1024.00000

Test Case 2:
Input: x = 2.10000, n = 3
Output: 9.26100

Test Case 3:
Input: x = 2.00000, n = -2
Output: 0.25000
Explanation: 2-2 = 1/22 = 1/4 = 0.25","2.00000
10

2.10000
3

2.00000
-2","1024.00000
9.26100
0.25000","class Solution:
    def myPow(self, x: float, n: int) -> float:
        ","class Solution {
public:
    double myPow(double x, int n) {
        
    }
};","class Solution {
    public double myPow(double x, int n) {
        
    }
}","import sys, json, math, itertools, collections","if __name__ == ""__main__"":
    data = sys.stdin.read().strip().splitlines()
    line_idx = 0

    x = float(data[line_idx])
    line_idx += 1
    n = int(data[line_idx])
    line_idx += 1

    sol = Solution()
    ans = sol.myPow(x, n)

    if isinstance(ans, list):
        print(json.dumps(ans, separators=(',', ':')))
    elif isinstance(ans, bool):
        print('true' if ans else 'false')
    else:
        print(ans)","#include <bits/stdc++.h>
using namespace std;","int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    double x;
    if (!(cin >> x)) return 0;
    int n;
    if (!(cin >> n)) return 0;

    Solution sol;
    auto ans = sol.myPow(x, n);
    cout << ans;
    cout << '\n';
    return 0;
}","import java.io.*;
import java.util.*;","public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        double x = Double.parseDouble(br.readLine());
        int n = Integer.parseInt(br.readLine());

        Solution sol = new Solution();
        var ans = sol.myPow(x, n);
        System.out.print(ans);
        System.out.println();
    }
}"
33,N-Queens,"The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.
Given an integer n, return all distinct solutions to the n-queens puzzle. You may return the answer in any order.
Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively.
Example 1:
Input: n = 4
Output: [["".Q.."",""...Q"",""Q..."",""..Q.""],[""..Q."",""Q..."",""...Q"","".Q..""]]
Explanation: There exist two distinct solutions to the 4-queens puzzle as shown above
Example 2:
Input: n = 1
Output: [[""Q""]]
Constraints:
1 <= n <= 9",Hard,"Array, Backtracking","Test Case 1:
Input: n = 4
Output: [["".Q.."",""...Q"",""Q..."",""..Q.""],[""..Q."",""Q..."",""...Q"","".Q..""]]
Explanation: There exist two distinct solutions to the 4-queens puzzle as shown above

Test Case 2:
Input: n = 1
Output: [[""Q""]]","4

1","[["".Q.."",""...Q"",""Q..."",""..Q.""],[""..Q."",""Q..."",""...Q"","".Q..""]]
[[""Q""]]","class Solution:
    def solveNQueens(self, n: int) -> List[List[str]]:
        ","class Solution {
public:
    vector<vector<string>> solveNQueens(int n) {
        
    }
};","class Solution {
    public List<List<String>> solveNQueens(int n) {
        
    }
}","import sys, json, math, itertools, collections","if __name__ == ""__main__"":
    data = sys.stdin.read().strip().splitlines()
    line_idx = 0

    n = int(data[line_idx])
    line_idx += 1

    sol = Solution()
    ans = sol.solveNQueens(n)

    if isinstance(ans, list):
        print(json.dumps(ans, separators=(',', ':')))
    elif isinstance(ans, bool):
        print('true' if ans else 'false')
    else:
        print(ans)","#include <bits/stdc++.h>
using namespace std;","int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int n;
    if (!(cin >> n)) return 0;

    Solution sol;
    vector<vector<string>> ans = sol.solveNQueens(n);

    cout << '[';
    for (size_t i = 0; i < ans.size(); ++i) {
        cout << '[';
        for (size_t j = 0; j < ans[i].size(); ++j) {
            cout << '""' << ans[i][j] << '""' << (j + 1 == ans[i].size() ? ']' : ',');
        }
        cout << (i + 1 == ans.size() ? ']' : ',');
    }
    cout << '
';
    return 0;
}","import java.io.*;
import java.util.*;","public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        int n = Integer.parseInt(br.readLine());

        Solution sol = new Solution();
        String ans = sol.solveNQueens(n);
        System.out.print(ans);
        System.out.println();
    }
}"
34,N-Queens II,"The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.
Given an integer n, return the number of distinct solutions to the n-queens puzzle.
Example 1:
Input: n = 4
Output: 2
Explanation: There are two distinct solutions to the 4-queens puzzle as shown.
Example 2:
Input: n = 1
Output: 1
Constraints:
1 <= n <= 9",Hard,Backtracking,"Test Case 1:
Input: n = 4
Output: 2
Explanation: There are two distinct solutions to the 4-queens puzzle as shown.

Test Case 2:
Input: n = 1
Output: 1","4

1","2
1","class Solution:
    def totalNQueens(self, n: int) -> int:
        ","class Solution {
public:
    int totalNQueens(int n) {
        
    }
};","class Solution {
    public int totalNQueens(int n) {
        
    }
}","import sys, json, math, itertools, collections","if __name__ == ""__main__"":
    data = sys.stdin.read().strip().splitlines()
    line_idx = 0

    n = int(data[line_idx])
    line_idx += 1

    sol = Solution()
    ans = sol.totalNQueens(n)

    if isinstance(ans, list):
        print(json.dumps(ans, separators=(',', ':')))
    elif isinstance(ans, bool):
        print('true' if ans else 'false')
    else:
        print(ans)","#include <bits/stdc++.h>
using namespace std;","int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int n;
    if (!(cin >> n)) return 0;

    Solution sol;
    auto ans = sol.totalNQueens(n);
    cout << ans;
    cout << '\n';
    return 0;
}","import java.io.*;
import java.util.*;","public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        int n = Integer.parseInt(br.readLine());

        Solution sol = new Solution();
        var ans = sol.totalNQueens(n);
        System.out.print(ans);
        System.out.println();
    }
}"
35,Maximum Subarray,"Given an integer array nums, find the subarray with the largest sum, and return its sum.
Example 1:
Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: The subarray [4,-1,2,1] has the largest sum 6.
Example 2:
Input: nums = [1]
Output: 1
Explanation: The subarray [1] has the largest sum 1.
Example 3:
Input: nums = [5,4,-1,7,8]
Output: 23
Explanation: The subarray [5,4,-1,7,8] has the largest sum 23.
Constraints:
1 <= nums.length <= 10^5
-10^4 <= nums[i] <= 10^4
Follow up: If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.",Medium,"Array, Divide and Conquer, Dynamic Programming","Test Case 1:
Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: The subarray [4,-1,2,1] has the largest sum 6.

Test Case 2:
Input: nums = [1]
Output: 1
Explanation: The subarray [1] has the largest sum 1.

Test Case 3:
Input: nums = [5,4,-1,7,8]
Output: 23
Explanation: The subarray [5,4,-1,7,8] has the largest sum 23.","9
-2 1 -3 4 -1 2 1 -5 4

1
1

5
5 4 -1 7 8","6
1
23","class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        ","class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        
    }
};","class Solution {
    public int maxSubArray(int[] nums) {
        
    }
}","import sys, json, math, itertools, collections","if __name__ == ""__main__"":
    data = sys.stdin.read().strip().splitlines()
    line_idx = 0

    n_nums = int(data[line_idx])
    line_idx += 1
    nums = list(map(int, data[line_idx].split()))
    line_idx += 1

    sol = Solution()
    ans = sol.maxSubArray(nums)

    if isinstance(ans, list):
        print(json.dumps(ans, separators=(',', ':')))
    elif isinstance(ans, bool):
        print('true' if ans else 'false')
    else:
        print(ans)","#include <bits/stdc++.h>
using namespace std;","int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int n_nums;
    if (!(cin >> n_nums)) return 0;
    vector<int> nums(n_nums);
    for (int i = 0; i < n_nums; ++i) cin >> nums[i];

    Solution sol;
    auto ans = sol.maxSubArray(nums);
    cout << ans;
    cout << '\n';
    return 0;
}","import java.io.*;
import java.util.*;","public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        int n_nums = Integer.parseInt(br.readLine());
        st = new StringTokenizer(br.readLine());
        int[] nums = new int[n_nums];
        for (int i = 0; i < n_nums; i++) {
            nums[i] = Integer.parseInt(st.nextToken());
        }

        Solution sol = new Solution();
        var ans = sol.maxSubArray(nums);
        System.out.print(ans);
        System.out.println();
    }
}"
36,Jump Game,"You are given an integer array nums. You are initially positioned at the array's first index, and each element in the array represents your maximum jump length at that position.
Return true if you can reach the last index, or false otherwise.
Example 1:
Input: nums = [2,3,1,1,4]
Output: true
Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.
Example 2:
Input: nums = [3,2,1,0,4]
Output: false
Explanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.
Constraints:
1 <= nums.length <= 10^4
0 <= nums[i] <= 10^5",Medium,"Array, Dynamic Programming, Greedy","Test Case 1:
Input: nums = [2,3,1,1,4]
Output: true
Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.

Test Case 2:
Input: nums = [3,2,1,0,4]
Output: false
Explanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.","5
2 3 1 1 4

5
3 2 1 0 4","true
false","class Solution:
    def canJump(self, nums: List[int]) -> bool:
        ","class Solution {
public:
    bool canJump(vector<int>& nums) {
        
    }
};","class Solution {
    public boolean canJump(int[] nums) {
        
    }
}","import sys, json, math, itertools, collections","if __name__ == ""__main__"":
    data = sys.stdin.read().strip().splitlines()
    line_idx = 0

    n_nums = int(data[line_idx])
    line_idx += 1
    nums = list(map(int, data[line_idx].split()))
    line_idx += 1

    sol = Solution()
    ans = sol.canJump(nums)

    if isinstance(ans, list):
        print(json.dumps(ans, separators=(',', ':')))
    elif isinstance(ans, bool):
        print('true' if ans else 'false')
    else:
        print(ans)","#include <bits/stdc++.h>
using namespace std;","int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int n_nums;
    if (!(cin >> n_nums)) return 0;
    vector<int> nums(n_nums);
    for (int i = 0; i < n_nums; ++i) cin >> nums[i];

    Solution sol;
    bool ans = sol.canJump(nums);
    cout << (ans ? ""true"" : ""false"");
    cout << '\n';
    return 0;
}","import java.io.*;
import java.util.*;","public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        int n_nums = Integer.parseInt(br.readLine());
        st = new StringTokenizer(br.readLine());
        int[] nums = new int[n_nums];
        for (int i = 0; i < n_nums; i++) {
            nums[i] = Integer.parseInt(st.nextToken());
        }

        Solution sol = new Solution();
        boolean ans = sol.canJump(nums);
        System.out.print(ans ? ""true"" : ""false"");
        System.out.println();
    }
}"
37,Merge Intervals,"Given an array of intervals where intervals[i] = [start[i], end[i] ], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.
Example 1:
Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].
Example 2:
Input: intervals = [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.
Constraints:
1 <= intervals.length <= 10^4
intervals[i].length == 2^0 <= start[i] <= end[i] <= 10^4",Medium,"Array, Sorting","Test Case 1:
Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].

Test Case 2:
Input: intervals = [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.","4 2
1 3
2 6
8 10
15 18

2 2
1 4
4 5","[[1,6],[8,10],[15,18]]
[[1,5]]","class Solution:
    def merge(self, intervals: List[List[int]]) -> List[List[int]]:
        ","class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        
    }
};","class Solution {
    public int[][] merge(int[][] intervals) {
        
    }
}","import sys, json, math, itertools, collections","if __name__ == ""__main__"":
    data = sys.stdin.read().strip().splitlines()
    line_idx = 0

    n_intervals = int(data[line_idx])
    line_idx += 1
    intervals = list(map(int, data[line_idx].split()))
    line_idx += 1

    sol = Solution()
    ans = sol.merge(intervals)

    if isinstance(ans, list):
        print(json.dumps(ans, separators=(',', ':')))
    elif isinstance(ans, bool):
        print('true' if ans else 'false')
    else:
        print(ans)","#include <bits/stdc++.h>
using namespace std;","int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int m_intervals, n_intervals;
    if (!(cin >> m_intervals >> n_intervals)) return 0;
    vector<vector<int>> intervals(m_intervals, vector<int>(n_intervals));
    for (int i = 0; i < m_intervals; ++i) {
        for (int j = 0; j < n_intervals; ++j) {
            cin >> intervals[i][j];
        }
    }

    Solution sol;
    vector<vector<int>> ans = sol.merge(intervals);
    cout << '[';
    for (size_t i = 0; i < ans.size(); ++i) {
        cout << '[';
        for (size_t j = 0; j < ans[i].size(); ++j) {
            cout << ans[i][j] << (j + 1 == ans[i].size() ? ']' : ',');
        }
        cout << (i + 1 == ans.size() ? ']' : ',');
    }
    cout << '\n';
    return 0;
}","import java.io.*;
import java.util.*;","public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        int n_intervals = Integer.parseInt(br.readLine());
        st = new StringTokenizer(br.readLine());
        int[] intervals = new int[n_intervals];
        for (int i = 0; i < n_intervals; i++) {
            intervals[i] = Integer.parseInt(st.nextToken());
        }

        Solution sol = new Solution();
        int[] ans = sol.merge(intervals);
        System.out.print(""["");
        for (int i = 0; i < ans.length; i++) {
            System.out.print(ans[i] + (i == ans.length - 1 ? ""]"" : "",""));
        }
        System.out.println();
    }
}"
38,Insert Interval,"You are given an array of non-overlapping intervals intervals where intervals[i] = [start[i], end[i] ] represent the start and the end of the i-th interval and intervals is sorted in ascending order by start[i]. You are also given an interval newInterval = [start, end] that represents the start and end of another interval.
Insert newInterval into intervals such that intervals is still sorted in ascending order by start[i] and intervals still does not have any overlapping intervals (merge overlapping intervals if necessary).
Return intervals after the insertion.
Note that you don't need to modify intervals in-place. You can make a new array and return it.
Example 1:
Input: intervals = [[1,3],[6,9]], newInterval = [2,5]
Output: [[1,5],[6,9]]
Example 2:
Input: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]
Output: [[1,2],[3,10],[12,16]]
Explanation: Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10].
Constraints:
0 <= intervals.length <= 10^4
intervals[i].length == 2
0 <= start[i] <= end[i] <= 10^5
intervals is sorted by start i in ascending order.
newInterval.length == 2
0 <= start <= end <= 10^5",Medium,Array,"Test Case 1:
Input: intervals = [[1,3],[6,9]], newInterval = [2,5]
Output: [[1,5],[6,9]]

Test Case 2:
Input: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]
Output: [[1,2],[3,10],[12,16]]
Explanation: Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10].","2 2
1 3
6 9
2
2 5

5 2
1 2
3 5
6 7
8 10
12 16
2
4 8","[[1,5],[6,9]]
[[1,2],[3,10],[12,16]]","class Solution:
    def insert(self, intervals: List[List[int]], newInterval: List[int]) -> List[List[int]]:
        ","class Solution {
public:
    vector<vector<int>> insert(vector<vector<int>>& intervals, vector<int>& newInterval) {
        
    }
};","class Solution {
    public int[][] insert(int[][] intervals, int[] newInterval) {
        
    }
}","import sys, json, math, itertools, collections","if __name__ == ""__main__"":
    data = sys.stdin.read().strip().splitlines()
    line_idx = 0

    n_intervals = int(data[line_idx])
    line_idx += 1
    intervals = list(map(int, data[line_idx].split()))
    line_idx += 1
    n_newInterval = int(data[line_idx])
    line_idx += 1
    newInterval = list(map(int, data[line_idx].split()))
    line_idx += 1

    sol = Solution()
    ans = sol.insert(intervals, newInterval)

    if isinstance(ans, list):
        print(json.dumps(ans, separators=(',', ':')))
    elif isinstance(ans, bool):
        print('true' if ans else 'false')
    else:
        print(ans)","#include <bits/stdc++.h>
using namespace std;","int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int m_intervals, n_intervals;
    if (!(cin >> m_intervals >> n_intervals)) return 0;
    vector<vector<int>> intervals(m_intervals, vector<int>(n_intervals));
    for (int i = 0; i < m_intervals; ++i) {
        for (int j = 0; j < n_intervals; ++j) {
            cin >> intervals[i][j];
        }
    }
    int n_newInterval;
    if (!(cin >> n_newInterval)) return 0;
    vector<int> newInterval(n_newInterval);
    for (int i = 0; i < n_newInterval; ++i) cin >> newInterval[i];

    Solution sol;
    vector<vector<int>> ans = sol.insert(intervals, newInterval);
    cout << '[';
    for (size_t i = 0; i < ans.size(); ++i) {
        cout << '[';
        for (size_t j = 0; j < ans[i].size(); ++j) {
            cout << ans[i][j] << (j + 1 == ans[i].size() ? ']' : ',');
        }
        cout << (i + 1 == ans.size() ? ']' : ',');
    }
    cout << '\n';
    return 0;
}","import java.io.*;
import java.util.*;","public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        int n_intervals = Integer.parseInt(br.readLine());
        st = new StringTokenizer(br.readLine());
        int[] intervals = new int[n_intervals];
        for (int i = 0; i < n_intervals; i++) {
            intervals[i] = Integer.parseInt(st.nextToken());
        }
        int n_newInterval = Integer.parseInt(br.readLine());
        st = new StringTokenizer(br.readLine());
        int[] newInterval = new int[n_newInterval];
        for (int i = 0; i < n_newInterval; i++) {
            newInterval[i] = Integer.parseInt(st.nextToken());
        }

        Solution sol = new Solution();
        int[] ans = sol.insert(intervals, newInterval);
        System.out.print(""["");
        for (int i = 0; i < ans.length; i++) {
            System.out.print(ans[i] + (i == ans.length - 1 ? ""]"" : "",""));
        }
        System.out.println();
    }
}"
39,Length of Last Word,"Given a string s consisting of words and spaces, return the length of the last word in the string.
A word is a maximal substring consisting of non-space characters only.
Example 1:
Input: s = ""Hello World""
Output: 5
Explanation: The last word is ""World"" with length 5.
Example 2:
Input: s = "" fly me to the moon ""
Output: 4
Explanation: The last word is ""moon"" with length 4.
Example 3:
Input: s = ""luffy is still joyboy""
Output: 6
Explanation: The last word is ""joyboy"" with length 6.
Constraints:
1 <= s.length <= 10^4
s consists of only English letters and spaces ' '.
There will be at least one word in s.",Easy,String,"Test Case 1:
Input: s = ""Hello World""
Output: 5
Explanation: The last word is ""World"" with length 5.

Test Case 2:
Input: s = ""   fly me   to   the moon  ""
Output: 4
Explanation: The last word is ""moon"" with length 4.

Test Case 3:
Input: s = ""luffy is still joyboy""
Output: 6
Explanation: The last word is ""joyboy"" with length 6.","Hello World

   fly me   to   the moon

luffy is still joyboy","5
4
6","class Solution:
    def lengthOfLastWord(self, s: str) -> int:
        ","class Solution {
public:
    int lengthOfLastWord(string s) {
        
    }
};","class Solution {
    public int lengthOfLastWord(String s) {
        
    }
}","import sys, json, math, itertools, collections","if __name__ == ""__main__"":
    data = sys.stdin.read().strip().splitlines()
    line_idx = 0

    s = data[line_idx]
    line_idx += 1

    sol = Solution()
    ans = sol.lengthOfLastWord(s)

    if isinstance(ans, list):
        print(json.dumps(ans, separators=(',', ':')))
    elif isinstance(ans, bool):
        print('true' if ans else 'false')
    else:
        print(ans)","#include <bits/stdc++.h>
using namespace std;","int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    string s;
    if (!(cin >> s)) return 0;

    Solution sol;
    auto ans = sol.lengthOfLastWord(s);
    cout << ans;
    cout << '\n';
    return 0;
}","import java.io.*;
import java.util.*;","public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        String s = br.readLine();

        Solution sol = new Solution();
        var ans = sol.lengthOfLastWord(s);
        System.out.print(ans);
        System.out.println();
    }
}"
40,Permutation Sequence,"The set [1, 2, 3,..., n] contains a total of n! unique permutations.
By listing and labeling all of the permutations in order, we get the following sequence for n = 3:
""123""
""132""
""213""
""231""
""312""
""321""
Given n and k, return the k th permutation sequence.
Example 1:
Input: n = 3, k = 3
Output: ""213""
Example 2:
Input: n = 4, k = 9
Output: ""2314""
Example 3:
Input: n = 3, k = 1
Output: ""123""
Constraints:
1 <= n <= 9
1 <= k <= n!",Hard,"Math, Recursion","Test Case 1:
Input: n = 3, k = 3
Output: ""213""

Test Case 2:
Input: n = 4, k = 9
Output: ""2314""

Test Case 3:
Input: n = 3, k = 1
Output: ""123""","3
3

4
9

3
1","213
2314
123","class Solution:
    def getPermutation(self, n: int, k: int) -> str:
        ","class Solution {
public:
    string getPermutation(int n, int k) {
        
    }
};","class Solution {
    public String getPermutation(int n, int k) {
        
    }
}","import sys, json, math, itertools, collections","if __name__ == ""__main__"":
    data = sys.stdin.read().strip().splitlines()
    line_idx = 0

    n = int(data[line_idx])
    line_idx += 1
    k = int(data[line_idx])
    line_idx += 1

    sol = Solution()
    ans = sol.getPermutation(n, k)

    if isinstance(ans, list):
        print(json.dumps(ans, separators=(',', ':')))
    elif isinstance(ans, bool):
        print('true' if ans else 'false')
    else:
        print(ans)","#include <bits/stdc++.h>
using namespace std;","int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int n;
    if (!(cin >> n)) return 0;
    int k;
    if (!(cin >> k)) return 0;

    Solution sol;
    string ans = sol.getPermutation(n, k);
    cout << ans;
    cout << '\n';
    return 0;
}","import java.io.*;
import java.util.*;","public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        int n = Integer.parseInt(br.readLine());
        int k = Integer.parseInt(br.readLine());

        Solution sol = new Solution();
        String ans = sol.getPermutation(n, k);
        System.out.print(ans);
        System.out.println();
    }
}"
41,Unique Paths,"There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0] ). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1] ). The robot can only move either down or right at any point in time.
Given the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner.
The test cases are generated so that the answer will be less than or equal to 2 * 10^9.
Example 1:
Input: m = 3, n = 7
Output: 28
Example 2:
Input: m = 3, n = 2
Output: 3
Explanation: From the top-left corner, there are a total of 3 ways to reach the bottom-right corner: 
1. Right -> Down -> Down 
2. Down -> Down -> Right 
3. Down -> Right -> Down
Constraints:
1 <= m, n <= 100",Medium,"Math, Dynamic Programming, Combinatorics","Test Case 1:
Input: m = 3, n = 7
Output: 28

Test Case 2:
Input: m = 3, n = 2
Output: 3
Explanation: From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:
1. Right -> Down -> Down
2. Down -> Down -> Right
3. Down -> Right -> Down","3
7

3
2","28
3","class Solution:
    def uniquePaths(self, m: int, n: int) -> int:
        ","class Solution {
public:
    int uniquePaths(int m, int n) {
        
    }
};","class Solution {
    public int uniquePaths(int m, int n) {
        
    }
}","import sys, json, math, itertools, collections","if __name__ == ""__main__"":
    data = sys.stdin.read().strip().splitlines()
    line_idx = 0

    m = int(data[line_idx])
    line_idx += 1
    n = int(data[line_idx])
    line_idx += 1

    sol = Solution()
    ans = sol.uniquePaths(m, n)

    if isinstance(ans, list):
        print(json.dumps(ans, separators=(',', ':')))
    elif isinstance(ans, bool):
        print('true' if ans else 'false')
    else:
        print(ans)","#include <bits/stdc++.h>
using namespace std;","int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int m;
    if (!(cin >> m)) return 0;
    int n;
    if (!(cin >> n)) return 0;

    Solution sol;
    auto ans = sol.uniquePaths(m, n);
    cout << ans;
    cout << '\n';
    return 0;
}","import java.io.*;
import java.util.*;","public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        int m = Integer.parseInt(br.readLine());
        int n = Integer.parseInt(br.readLine());

        Solution sol = new Solution();
        var ans = sol.uniquePaths(m, n);
        System.out.print(ans);
        System.out.println();
    }
}"
42,Unique Paths II,"You are given an m x n integer array grid. There is a robot initially located at the top-left corner (i.e., grid[0][0] ). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1] ). The robot can only move either down or right at any point in time.
An obstacle and space are marked as 1 or 0 respectively in grid. A path that the robot takes cannot include any square that is an obstacle.
Return the number of possible unique paths that the robot can take to reach the bottom-right corner.
The testcases are generated so that the answer will be less than or equal to 2 * 10^9.
Example 1:
Input: obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]
Output: 2
Explanation: There is one obstacle in the middle of the 3x3 grid above. There are two ways to reach the bottom-right corner: 
1. Right -> Right -> Down -> Down 
2. Down -> Down -> Right -> Right
Example 2:
Input: obstacleGrid = [[0,1],[0,0]]
Output: 1
Constraints:
m == obstacleGrid.length
n == obstacleGrid[i].length
1 <= m, n <= 100
obstacleGrid[i][j] is 0 or 1.",Medium,"Array, Dynamic Programming, Matrix","Test Case 1:
Input: obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]
Output: 2
Explanation: There is one obstacle in the middle of the 3x3 grid above.
There are two ways to reach the bottom-right corner:
1. Right -> Right -> Down -> Down
2. Down -> Down -> Right -> Right

Test Case 2:
Input: obstacleGrid = [[0,1],[0,0]]
Output: 1","3 3
0 0 0
0 1 0
0 0 0

2 2
0 1
0 0","2
1","class Solution:
    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:
        ","class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        
    }
};","class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        
    }
}","import sys, json, math, itertools, collections","if __name__ == ""__main__"":
    data = sys.stdin.read().strip().splitlines()
    line_idx = 0

    n_obstacleGrid = int(data[line_idx])
    line_idx += 1
    obstacleGrid = list(map(int, data[line_idx].split()))
    line_idx += 1

    sol = Solution()
    ans = sol.uniquePathsWithObstacles(obstacleGrid)

    if isinstance(ans, list):
        print(json.dumps(ans, separators=(',', ':')))
    elif isinstance(ans, bool):
        print('true' if ans else 'false')
    else:
        print(ans)","#include <bits/stdc++.h>
using namespace std;","int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int m_obstacleGrid, n_obstacleGrid;
    if (!(cin >> m_obstacleGrid >> n_obstacleGrid)) return 0;
    vector<vector<int>> obstacleGrid(m_obstacleGrid, vector<int>(n_obstacleGrid));
    for (int i = 0; i < m_obstacleGrid; ++i) {
        for (int j = 0; j < n_obstacleGrid; ++j) {
            cin >> obstacleGrid[i][j];
        }
    }

    Solution sol;
    auto ans = sol.uniquePathsWithObstacles(obstacleGrid);
    cout << ans;
    cout << '\n';
    return 0;
}","import java.io.*;
import java.util.*;","public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        int n_obstacleGrid = Integer.parseInt(br.readLine());
        st = new StringTokenizer(br.readLine());
        int[] obstacleGrid = new int[n_obstacleGrid];
        for (int i = 0; i < n_obstacleGrid; i++) {
            obstacleGrid[i] = Integer.parseInt(st.nextToken());
        }

        Solution sol = new Solution();
        var ans = sol.uniquePathsWithObstacles(obstacleGrid);
        System.out.print(ans);
        System.out.println();
    }
}"
43,Minimum Path Sum,"Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.
Note: You can only move either down or right at any point in time.
Example 1:
Input: grid = [[1,3,1],[1,5,1],[4,2,1]]
Output: 7
Explanation: Because the path 1 -> 3 -> 1 -> 1 -> 1 minimizes the sum.
Example 2:
Input: grid = [[1,2,3],[4,5,6]]
Output: 12
Constraints:
m == grid.length
n == grid[i].length
1 <= m, n <= 200
0 <= grid[i][j] <= 200",Medium,"Array, Dynamic Programming, Matrix","Test Case 1:
Input: grid = [[1,3,1],[1,5,1],[4,2,1]]
Output: 7
Explanation: Because the path 1 → 3 → 1 → 1 → 1 minimizes the sum.

Test Case 2:
Input: grid = [[1,2,3],[4,5,6]]
Output: 12","3 3
1 3 1
1 5 1
4 2 1

2 3
1 2 3
4 5 6","7
12","class Solution:
    def minPathSum(self, grid: List[List[int]]) -> int:
        ","class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        
    }
};","class Solution {
    public int minPathSum(int[][] grid) {
        
    }
}","import sys, json, math, itertools, collections","if __name__ == ""__main__"":
    data = sys.stdin.read().strip().splitlines()
    line_idx = 0

    n_grid = int(data[line_idx])
    line_idx += 1
    grid = list(map(int, data[line_idx].split()))
    line_idx += 1

    sol = Solution()
    ans = sol.minPathSum(grid)

    if isinstance(ans, list):
        print(json.dumps(ans, separators=(',', ':')))
    elif isinstance(ans, bool):
        print('true' if ans else 'false')
    else:
        print(ans)","#include <bits/stdc++.h>
using namespace std;","int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int m_grid, n_grid;
    if (!(cin >> m_grid >> n_grid)) return 0;
    vector<vector<int>> grid(m_grid, vector<int>(n_grid));
    for (int i = 0; i < m_grid; ++i) {
        for (int j = 0; j < n_grid; ++j) {
            cin >> grid[i][j];
        }
    }

    Solution sol;
    auto ans = sol.minPathSum(grid);
    cout << ans;
    cout << '\n';
    return 0;
}","import java.io.*;
import java.util.*;","public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        int n_grid = Integer.parseInt(br.readLine());
        st = new StringTokenizer(br.readLine());
        int[] grid = new int[n_grid];
        for (int i = 0; i < n_grid; i++) {
            grid[i] = Integer.parseInt(st.nextToken());
        }

        Solution sol = new Solution();
        var ans = sol.minPathSum(grid);
        System.out.print(ans);
        System.out.println();
    }
}"
44,Plus One,"You are given a large integer represented as an integer array digits, where each digits[i] is the i th digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0 's.
Increment the large integer by one and return the resulting array of digits.
Example 1:
Input: digits = [1,2,3]
Output: [1,2,4]
Explanation: The array represents the integer 123. Incrementing by one gives 123 + 1 = 124. Thus, the result should be [1,2,4].
Example 2:
Input: digits = [4,3,2,1]
Output: [4,3,2,2]
Explanation: The array represents the integer 4321. Incrementing by one gives 4321 + 1 = 4322. Thus, the result should be [4,3,2,2].
Example 3:
Input: digits = [9]
Output: [1,0]
Explanation: The array represents the integer 9. Incrementing by one gives 9 + 1 = 10. Thus, the result should be [1,0].
Constraints:
1 <= digits.length <= 100
0 <= digits[i] <= 9
digits does not contain any leading 0 's.",Easy,"Array, Math","Test Case 1:
Input: digits = [1,2,3]
Output: [1,2,4]
Explanation: The array represents the integer 123.
Incrementing by one gives 123 + 1 = 124.
Thus, the result should be [1,2,4].

Test Case 2:
Input: digits = [4,3,2,1]
Output: [4,3,2,2]
Explanation: The array represents the integer 4321.
Incrementing by one gives 4321 + 1 = 4322.
Thus, the result should be [4,3,2,2].

Test Case 3:
Input: digits = [9]
Output: [1,0]
Explanation: The array represents the integer 9.
Incrementing by one gives 9 + 1 = 10.
Thus, the result should be [1,0].","3
1 2 3

4
4 3 2 1

1
9","[1,2,4]
[4,3,2,2]
[1,0]","class Solution:
    def plusOne(self, digits: List[int]) -> List[int]:
        ","class Solution {
public:
    vector<int> plusOne(vector<int>& digits) {
        
    }
};","class Solution {
    public int[] plusOne(int[] digits) {
        
    }
}","import sys, json, math, itertools, collections","if __name__ == ""__main__"":
    data = sys.stdin.read().strip().splitlines()
    line_idx = 0

    n_digits = int(data[line_idx])
    line_idx += 1
    digits = list(map(int, data[line_idx].split()))
    line_idx += 1

    sol = Solution()
    ans = sol.plusOne(digits)

    if isinstance(ans, list):
        print(json.dumps(ans, separators=(',', ':')))
    elif isinstance(ans, bool):
        print('true' if ans else 'false')
    else:
        print(ans)","#include <bits/stdc++.h>
using namespace std;","int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int n_digits;
    if (!(cin >> n_digits)) return 0;
    vector<int> digits(n_digits);
    for (int i = 0; i < n_digits; ++i) cin >> digits[i];

    Solution sol;
    vector<int> ans = sol.plusOne(digits);
    cout << '[';
    for (size_t i = 0; i < ans.size(); ++i) {
        cout << ans[i] << (i + 1 == ans.size() ? ']' : ',');
    }
    cout << '\n';
    return 0;
}","import java.io.*;
import java.util.*;","public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        int n_digits = Integer.parseInt(br.readLine());
        st = new StringTokenizer(br.readLine());
        int[] digits = new int[n_digits];
        for (int i = 0; i < n_digits; i++) {
            digits[i] = Integer.parseInt(st.nextToken());
        }

        Solution sol = new Solution();
        int[] ans = sol.plusOne(digits);
        System.out.print(""["");
        for (int i = 0; i < ans.length; i++) {
            System.out.print(ans[i] + (i == ans.length - 1 ? ""]"" : "",""));
        }
        System.out.println();
    }
}"
45,Add Binary,"Given two binary strings a and b, return their sum as a binary string.
Example 1:
Input: a = ""11"", b = ""1""
Output: ""100""
Example 2:
Input: a = ""1010"", b = ""1011""
Output: ""10101""
Constraints:
1 <= a.length, b.length <= 10^4
a and b consist only of '0' or '1' characters.
Each string does not contain leading zeros except for the zero itself.",Easy,"Math, String, Bit Manipulation, Simulation","Test Case 1:
Input: a = ""11"", b = ""1""
Output: ""100""

Test Case 2:
Input: a = ""1010"", b = ""1011""
Output: ""10101""","11
1

1010
1011","100
10101","class Solution:
    def addBinary(self, a: str, b: str) -> str:
        ","class Solution {
public:
    string addBinary(string a, string b) {
        
    }
};","class Solution {
    public String addBinary(String a, String b) {
        
    }
}","import sys, json, math, itertools, collections","if __name__ == ""__main__"":
    data = sys.stdin.read().strip().splitlines()
    line_idx = 0

    a = data[line_idx]
    line_idx += 1
    b = data[line_idx]
    line_idx += 1

    sol = Solution()
    ans = sol.addBinary(a, b)

    if isinstance(ans, list):
        print(json.dumps(ans, separators=(',', ':')))
    elif isinstance(ans, bool):
        print('true' if ans else 'false')
    else:
        print(ans)","#include <bits/stdc++.h>
using namespace std;","int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    string a;
    if (!(cin >> a)) return 0;
    string b;
    if (!(cin >> b)) return 0;

    Solution sol;
    string ans = sol.addBinary(a, b);
    cout << ans;
    cout << '\n';
    return 0;
}","import java.io.*;
import java.util.*;","public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        String a = br.readLine();
        String b = br.readLine();

        Solution sol = new Solution();
        String ans = sol.addBinary(a, b);
        System.out.print(ans);
        System.out.println();
    }
}"
46,Sqrt(x),"Given a non-negative integer x, return the square root of x rounded down to the nearest integer. The returned integer should be non-negative as well.
You must not use any built-in exponent function or operator.
For example, do not use pow(x, 0.5) in c++ or x ** 0.5 in python.
Example 1:
Input: x = 4
Output: 2
Explanation: The square root of 4 is 2, so we return 2.
Example 2:
Input: x = 8
Output: 2
Explanation: The square root of 8 is 2.82842..., and since we round it down to the nearest integer, 2 is returned.
Constraints:
0 <= x <= 2^31 - 1",Easy,"Math, Binary Search","Test Case 1:
Input: x = 4
Output: 2
Explanation: The square root of 4 is 2, so we return 2.

Test Case 2:
Input: x = 8
Output: 2
Explanation: The square root of 8 is 2.82842..., and since we round it down to the nearest integer, 2 is returned.","4

8","2
2","class Solution:
    def mySqrt(self, x: int) -> int:
        ","class Solution {
public:
    int mySqrt(int x) {
        
    }
};","class Solution {
    public int mySqrt(int x) {
        
    }
}","import sys, json, math, itertools, collections","if __name__ == ""__main__"":
    data = sys.stdin.read().strip().splitlines()
    line_idx = 0

    x = int(data[line_idx])
    line_idx += 1

    sol = Solution()
    ans = sol.mySqrt(x)

    if isinstance(ans, list):
        print(json.dumps(ans, separators=(',', ':')))
    elif isinstance(ans, bool):
        print('true' if ans else 'false')
    else:
        print(ans)","#include <bits/stdc++.h>
using namespace std;","int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int x;
    if (!(cin >> x)) return 0;

    Solution sol;
    auto ans = sol.mySqrt(x);
    cout << ans;
    cout << '\n';
    return 0;
}","import java.io.*;
import java.util.*;","public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        int x = Integer.parseInt(br.readLine());

        Solution sol = new Solution();
        var ans = sol.mySqrt(x);
        System.out.print(ans);
        System.out.println();
    }
}"
47,Climbing Stairs,"You are climbing a staircase. It takes n steps to reach the top.
Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?
Example 1:
Input: n = 2
Output: 2
Explanation: There are two ways to climb to the top. 1. 1 step + 1 step 2. 2 steps
Example 2:
Input: n = 3
Output: 3
Explanation: There are three ways to climb to the top. 
1. 1 step + 1 step + 1 step 
2. 1 step + 2 steps 
3. 2 steps + 1 step
Constraints:
1 <= n <= 45",Easy,"Math, Dynamic Programming, Memoization","Test Case 1:
Input: n = 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps

Test Case 2:
Input: n = 3
Output: 3
Explanation: There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step","2

3","2
3","class Solution:
    def climbStairs(self, n: int) -> int:
        ","class Solution {
public:
    int climbStairs(int n) {
        
    }
};","class Solution {
    public int climbStairs(int n) {
        
    }
}","import sys, json, math, itertools, collections","if __name__ == ""__main__"":
    data = sys.stdin.read().strip().splitlines()
    line_idx = 0

    n = int(data[line_idx])
    line_idx += 1

    sol = Solution()
    ans = sol.climbStairs(n)

    if isinstance(ans, list):
        print(json.dumps(ans, separators=(',', ':')))
    elif isinstance(ans, bool):
        print('true' if ans else 'false')
    else:
        print(ans)","#include <bits/stdc++.h>
using namespace std;","int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int n;
    if (!(cin >> n)) return 0;

    Solution sol;
    auto ans = sol.climbStairs(n);
    cout << ans;
    cout << '\n';
    return 0;
}","import java.io.*;
import java.util.*;","public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        int n = Integer.parseInt(br.readLine());

        Solution sol = new Solution();
        var ans = sol.climbStairs(n);
        System.out.print(ans);
        System.out.println();
    }
}"
48,Edit Distance,"Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.
You have the following three operations permitted on a word:
Insert a character
Delete a character
Replace a character
Example 1:
Input: word1 = ""horse"", word2 = ""ros""
Output: 3
Explanation:
horse -> rorse (replace 'h' with 'r') rorse -> rose (remove 'r') rose -> ros (remove 'e')
Example 2:
Input: word1 = ""intention"", word2 = ""execution""
Output: 5
Explanation:
intention -> inention (remove 't') inention -> enention (replace 'i' with 'e') enention -> exention (replace 'n' with 'x') exention -> exection (replace 'n' with 'c') exection -> execution (insert 'u')
Constraints:
0 <= word1.length, word2.length <= 500
word1 and word2 consist of lowercase English letters.",Medium,"String, Dynamic Programming","Test Case 1:
Input: word1 = ""horse"", word2 = ""ros""
Output: 3
Explanation: 
horse -> rorse (replace 'h' with 'r')
rorse -> rose (remove 'r')
rose -> ros (remove 'e')

Test Case 2:
Input: word1 = ""intention"", word2 = ""execution""
Output: 5
Explanation: 
intention -> inention (remove 't')
inention -> enention (replace 'i' with 'e')
enention -> exention (replace 'n' with 'x')
exention -> exection (replace 'n' with 'c')
exection -> execution (insert 'u')","horse
ros

intention
execution","3
5","class Solution:
    def minDistance(self, word1: str, word2: str) -> int:
        ","class Solution {
public:
    int minDistance(string word1, string word2) {
        
    }
};","class Solution {
    public int minDistance(String word1, String word2) {
        
    }
}","import sys, json, math, itertools, collections","if __name__ == ""__main__"":
    data = sys.stdin.read().strip().splitlines()
    line_idx = 0

    word1 = data[line_idx]
    line_idx += 1
    word2 = data[line_idx]
    line_idx += 1

    sol = Solution()
    ans = sol.minDistance(word1, word2)

    if isinstance(ans, list):
        print(json.dumps(ans, separators=(',', ':')))
    elif isinstance(ans, bool):
        print('true' if ans else 'false')
    else:
        print(ans)","#include <bits/stdc++.h>
using namespace std;","int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    string word1;
    if (!(cin >> word1)) return 0;
    string word2;
    if (!(cin >> word2)) return 0;

    Solution sol;
    auto ans = sol.minDistance(word1, word2);
    cout << ans;
    cout << '\n';
    return 0;
}","import java.io.*;
import java.util.*;","public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        String word1 = br.readLine();
        String word2 = br.readLine();

        Solution sol = new Solution();
        var ans = sol.minDistance(word1, word2);
        System.out.print(ans);
        System.out.println();
    }
}"
49,Set Matrix Zeroes,"Given an m x n integer matrix matrix, if an element is 0, set its entire row and column to 0 's.
You must do it in place.
Example 1:
Input: matrix = [[1,1,1],[1,0,1],[1,1,1]]
Output: [[1,0,1],[0,0,0],[1,0,1]]
Example 2:
Input: matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]
Output: [[0,0,0,0],[0,4,5,0],[0,3,1,0]]
Constraints:
m == matrix.length
n == matrix[0].length
1 <= m, n <= 200
-2^31 <= matrix[i][j] <= 2^31 - 1
Follow up:
A straightforward solution using O(mn) space is probably a bad idea.
A simple improvement uses O(m + n) space, but still not the best solution.
Could you devise a constant space solution?",Medium,"Array, Hash Table, Matrix","Test Case 1:
Input: matrix = [[1,1,1],[1,0,1],[1,1,1]]
Output: [[1,0,1],[0,0,0],[1,0,1]]

Test Case 2:
Input: matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]
Output: [[0,0,0,0],[0,4,5,0],[0,3,1,0]]","3 3
1 1 1
1 0 1
1 1 1

3 4
0 1 2 0
3 4 5 2
1 3 1 5","[[1,0,1],[0,0,0],[1,0,1]]
[[0,0,0,0],[0,4,5,0],[0,3,1,0]]","class Solution:
    def setZeroes(self, matrix: List[List[int]]) -> None:
        """"""
        Do not return anything, modify matrix in-place instead.
        """"""
        ","class Solution {
public:
    void setZeroes(vector<vector<int>>& matrix) {
        
    }
};","class Solution {
    public void setZeroes(int[][] matrix) {
        
    }
}","import sys, json, math, itertools, collections","if __name__ == ""__main__"":
    data = sys.stdin.read().strip().splitlines()
    line_idx = 0

    n_matrix = int(data[line_idx])
    line_idx += 1
    matrix = list(map(int, data[line_idx].split()))
    line_idx += 1

    sol = Solution()
    ans = sol.setZeroes(matrix)

    if isinstance(ans, list):
        print(json.dumps(ans, separators=(',', ':')))
    elif isinstance(ans, bool):
        print('true' if ans else 'false')
    else:
        print(ans)","#include <bits/stdc++.h>
using namespace std;","int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int m_matrix, n_matrix;
    if (!(cin >> m_matrix >> n_matrix)) return 0;
    vector<vector<int>> matrix(m_matrix, vector<int>(n_matrix));
    for (int i = 0; i < m_matrix; ++i) {
        for (int j = 0; j < n_matrix; ++j) {
            cin >> matrix[i][j];
        }
    }

    Solution sol;
    sol.setZeroes(matrix);
    cout << '[';
    for (size_t i = 0; i < matrix.size(); ++i) {
        cout << '[';
        for (size_t j = 0; j < matrix[i].size(); ++j) {
            cout << matrix[i][j] << (j + 1 == matrix[i].size() ? ']' : ',');
        }
        cout << (i + 1 == matrix.size() ? ']' : ',');
    }
    cout << '\n';
    return 0;
}","import java.io.*;
import java.util.*;","public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        int n_matrix = Integer.parseInt(br.readLine());
        st = new StringTokenizer(br.readLine());
        int[] matrix = new int[n_matrix];
        for (int i = 0; i < n_matrix; i++) {
            matrix[i] = Integer.parseInt(st.nextToken());
        }

        Solution sol = new Solution();
        sol.setZeroes(matrix);
        System.out.println();
    }
}"
50,Search a 2D Matrix,"You are given an m x n integer matrix matrix with the following two properties:
Each row is sorted in non-decreasing order.
The first integer of each row is greater than the last integer of the previous row.
Given an integer target, return true
if
target
is in
matrix
or
false
otherwise.
You must write a solution in O(log(m * n)) time complexity.
Example 1:
Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
Output: true
Example 2:
Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13
Output: false
Constraints:
m == matrix.length
n == matrix[i].length
1 <= m, n <= 100
-10^4 <= matrix[i][j], target <= 10^4",Medium,"Array, Binary Search, Matrix","Test Case 1:
Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
Output: true

Test Case 2:
Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13
Output: false","3 4
1 3 5 7
10 11 16 20
23 30 34 60
3

3 4
1 3 5 7
10 11 16 20
23 30 34 60
13","true
false","class Solution:
    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
        ","class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        
    }
};","class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        
    }
}","import sys, json, math, itertools, collections","if __name__ == ""__main__"":
    data = sys.stdin.read().strip().splitlines()
    line_idx = 0

    n_matrix = int(data[line_idx])
    line_idx += 1
    matrix = list(map(int, data[line_idx].split()))
    line_idx += 1
    target = int(data[line_idx])
    line_idx += 1

    sol = Solution()
    ans = sol.searchMatrix(matrix, target)

    if isinstance(ans, list):
        print(json.dumps(ans, separators=(',', ':')))
    elif isinstance(ans, bool):
        print('true' if ans else 'false')
    else:
        print(ans)","#include <bits/stdc++.h>
using namespace std;","int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int m_matrix, n_matrix;
    if (!(cin >> m_matrix >> n_matrix)) return 0;
    vector<vector<int>> matrix(m_matrix, vector<int>(n_matrix));
    for (int i = 0; i < m_matrix; ++i) {
        for (int j = 0; j < n_matrix; ++j) {
            cin >> matrix[i][j];
        }
    }
    int target;
    if (!(cin >> target)) return 0;

    Solution sol;
    bool ans = sol.searchMatrix(matrix, target);
    cout << (ans ? ""true"" : ""false"");
    cout << '\n';
    return 0;
}","import java.io.*;
import java.util.*;","public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        int n_matrix = Integer.parseInt(br.readLine());
        st = new StringTokenizer(br.readLine());
        int[] matrix = new int[n_matrix];
        for (int i = 0; i < n_matrix; i++) {
            matrix[i] = Integer.parseInt(st.nextToken());
        }
        int target = Integer.parseInt(br.readLine());

        Solution sol = new Solution();
        boolean ans = sol.searchMatrix(matrix, target);
        System.out.print(ans ? ""true"" : ""false"");
        System.out.println();
    }
}"
51,Sort Colors,"Given an array nums with n objects colored red, white, or blue, sort them in-place
so that objects of the same color are adjacent, with the colors in the order red, white, and blue.
We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.
You must solve this problem without using the library's sort function.
Example 1:
Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]
Example 2:
Input: nums = [2,0,1]
Output: [0,1,2]
Constraints:
n == nums.length
1 <= n <= 300
nums[i] is either 0, 1, or 2.
Follow up: Could you come up with a one-pass algorithm using only constant extra space?",Medium,"Array, Two Pointers, Sorting","Test Case 1:
Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]

Test Case 2:
Input: nums = [2,0,1]
Output: [0,1,2]","6
2 0 2 1 1 0

3
2 0 1","[0,0,1,1,2,2]
[0,1,2]","class Solution:
    def sortColors(self, nums: List[int]) -> None:
        """"""
        Do not return anything, modify nums in-place instead.
        """"""
        ","class Solution {
public:
    void sortColors(vector<int>& nums) {
        
    }
};","class Solution {
    public void sortColors(int[] nums) {
        
    }
}","import sys, json, math, itertools, collections","if __name__ == ""__main__"":
    data = sys.stdin.read().strip().splitlines()
    line_idx = 0

    n_nums = int(data[line_idx])
    line_idx += 1
    nums = list(map(int, data[line_idx].split()))
    line_idx += 1

    sol = Solution()
    ans = sol.sortColors(nums)

    if isinstance(ans, list):
        print(json.dumps(ans, separators=(',', ':')))
    elif isinstance(ans, bool):
        print('true' if ans else 'false')
    else:
        print(ans)","#include <bits/stdc++.h>
using namespace std;","int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int n_nums;
    if (!(cin >> n_nums)) return 0;
    vector<int> nums(n_nums);
    for (int i = 0; i < n_nums; ++i) cin >> nums[i];

    Solution sol;
    sol.sortColors(nums);
    cout << '\n';
    return 0;
}","import java.io.*;
import java.util.*;","public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        int n_nums = Integer.parseInt(br.readLine());
        st = new StringTokenizer(br.readLine());
        int[] nums = new int[n_nums];
        for (int i = 0; i < n_nums; i++) {
            nums[i] = Integer.parseInt(st.nextToken());
        }

        Solution sol = new Solution();
        sol.sortColors(nums);
        System.out.println();
    }
}"
52,Minimum Window Substring,"Given two strings s and t of lengths m and n respectively, return the minimum window
substring of s such that every character in t ( including duplicates ) is included in the window. If there is no such substring, return the empty string """".
The testcases will be generated such that the answer is unique.
Example 1:
Input: s = ""ADOBECODEBANC"", t = ""ABC""
Output: ""BANC""
Explanation: The minimum window substring ""BANC"" includes 'A', 'B', and 'C' from string t.
Example 2:
Input: s = ""a"", t = ""a""
Output: ""a""
Explanation: The entire string s is the minimum window.
Example 3:
Input: s = ""a"", t = ""aa""
Output: """"
Explanation: Both 'a's from t must be included in the window. Since the largest window of s only has one 'a', return empty string.
Constraints:
m == s.length
n == t.length
1 <= m, n <= 10^5
s and t consist of uppercase and lowercase English letters.
Follow up: Could you find an algorithm that runs in O(m + n) time?",Hard,"Hash Table, String, Sliding Window","Test Case 1:
Input: s = ""ADOBECODEBANC"", t = ""ABC""
Output: ""BANC""
Explanation: The minimum window substring ""BANC"" includes 'A', 'B', and 'C' from string t.

Test Case 2:
Input: s = ""a"", t = ""a""
Output: ""a""
Explanation: The entire string s is the minimum window.

Test Case 3:
Input: s = ""a"", t = ""aa""
Output: """"
Explanation: Both 'a's from t must be included in the window.
Since the largest window of s only has one 'a', return empty string.","ADOBECODEBANC
ABC

a
a

a
aa","BANC
a
","class Solution:
    def minWindow(self, s: str, t: str) -> str:
        ","class Solution {
public:
    string minWindow(string s, string t) {
        
    }
};","class Solution {
    public String minWindow(String s, String t) {
        
    }
}","import sys, json, math, itertools, collections","if __name__ == ""__main__"":
    data = sys.stdin.read().strip().splitlines()
    line_idx = 0

    s = data[line_idx]
    line_idx += 1
    t = data[line_idx]
    line_idx += 1

    sol = Solution()
    ans = sol.minWindow(s, t)

    if isinstance(ans, list):
        print(json.dumps(ans, separators=(',', ':')))
    elif isinstance(ans, bool):
        print('true' if ans else 'false')
    else:
        print(ans)","#include <bits/stdc++.h>
using namespace std;","int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    string s;
    if (!(cin >> s)) return 0;
    string t;
    if (!(cin >> t)) return 0;

    Solution sol;
    string ans = sol.minWindow(s, t);
    cout << ans;
    cout << '\n';
    return 0;
}","import java.io.*;
import java.util.*;","public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        String s = br.readLine();
        String t = br.readLine();

        Solution sol = new Solution();
        String ans = sol.minWindow(s, t);
        System.out.print(ans);
        System.out.println();
    }
}"
53,Combinations,"Given two integers n and k, return all possible combinations of k numbers chosen from the range [1, n].
You may return the answer in any order.
Example 1:
Input: n = 4, k = 2
Output: [[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]
Explanation: There are 4 choose 2 = 6 total combinations. Note that combinations are unordered, i.e., [1,2] and [2,1] are considered to be the same combination.
Example 2:
Input: n = 1, k = 1
Output: [[1]]
Explanation: There is 1 choose 1 = 1 total combination.
Constraints:
1 <= n <= 20 
1 <= k <= n",Medium,Backtracking,"Test Case 1:
Input: n = 4, k = 2
Output: [[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]
Explanation: There are 4 choose 2 = 6 total combinations.
Note that combinations are unordered, i.e., [1,2] and [2,1] are considered to be the same combination.

Test Case 2:
Input: n = 1, k = 1
Output: [[1]]
Explanation: There is 1 choose 1 = 1 total combination.","4
2

1
1","[[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]
[[1]]","class Solution:
    def combine(self, n: int, k: int) -> List[List[int]]:
        ","class Solution {
public:
    vector<vector<int>> combine(int n, int k) {
        
    }
};","class Solution {
    public List<List<Integer>> combine(int n, int k) {
        
    }
}","import sys, json, math, itertools, collections","if __name__ == ""__main__"":
    data = sys.stdin.read().strip().splitlines()
    line_idx = 0

    n = int(data[line_idx])
    line_idx += 1
    k = int(data[line_idx])
    line_idx += 1

    sol = Solution()
    ans = sol.combine(n, k)

    if isinstance(ans, list):
        print(json.dumps(ans, separators=(',', ':')))
    elif isinstance(ans, bool):
        print('true' if ans else 'false')
    else:
        print(ans)","#include <bits/stdc++.h>
using namespace std;","int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int n;
    if (!(cin >> n)) return 0;
    int k;
    if (!(cin >> k)) return 0;

    Solution sol;
    vector<vector<int>> ans = sol.combine(n, k);
    cout << '[';
    for (size_t i = 0; i < ans.size(); ++i) {
        cout << '[';
        for (size_t j = 0; j < ans[i].size(); ++j) {
            cout << ans[i][j] << (j + 1 == ans[i].size() ? ']' : ',');
        }
        cout << (i + 1 == ans.size() ? ']' : ',');
    }
    cout << '\n';
    return 0;
}","import java.io.*;
import java.util.*;","public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        int n = Integer.parseInt(br.readLine());
        int k = Integer.parseInt(br.readLine());

        Solution sol = new Solution();
        int[] ans = sol.combine(n, k);
        System.out.print(""["");
        for (int i = 0; i < ans.length; i++) {
            System.out.print(ans[i] + (i == ans.length - 1 ? ""]"" : "",""));
        }
        System.out.println();
    }
}"
54,Subsets,"Given an integer array nums of unique elements, return all possible
subsets
(the power set).
The solution set must not contain duplicate subsets. Return the solution in any order.
Example 1:
Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]
Example 2:
Input: nums = [0]
Output: [[],[0]]
Constraints:
1 <= nums.length <= 10
-10 <= nums[i] <= 10
All the numbers of nums are unique.",Medium,"Array, Backtracking, Bit Manipulation","Test Case 1:
Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]

Test Case 2:
Input: nums = [0]
Output: [[],[0]]","3
1 2 3

1
0","[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]
[[],[0]]","class Solution:
    def subsets(self, nums: List[int]) -> List[List[int]]:
        ","class Solution {
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        
    }
};","class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        
    }
}","import sys, json, math, itertools, collections","if __name__ == ""__main__"":
    data = sys.stdin.read().strip().splitlines()
    line_idx = 0

    n_nums = int(data[line_idx])
    line_idx += 1
    nums = list(map(int, data[line_idx].split()))
    line_idx += 1

    sol = Solution()
    ans = sol.subsets(nums)

    if isinstance(ans, list):
        print(json.dumps(ans, separators=(',', ':')))
    elif isinstance(ans, bool):
        print('true' if ans else 'false')
    else:
        print(ans)","#include <bits/stdc++.h>
using namespace std;","int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int n_nums;
    if (!(cin >> n_nums)) return 0;
    vector<int> nums(n_nums);
    for (int i = 0; i < n_nums; ++i) cin >> nums[i];

    Solution sol;
    vector<vector<int>> ans = sol.subsets(nums);
    cout << '[';
    for (size_t i = 0; i < ans.size(); ++i) {
        cout << '[';
        for (size_t j = 0; j < ans[i].size(); ++j) {
            cout << ans[i][j] << (j + 1 == ans[i].size() ? ']' : ',');
        }
        cout << (i + 1 == ans.size() ? ']' : ',');
    }
    cout << '\n';
    return 0;
}","import java.io.*;
import java.util.*;","public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        int n_nums = Integer.parseInt(br.readLine());
        st = new StringTokenizer(br.readLine());
        int[] nums = new int[n_nums];
        for (int i = 0; i < n_nums; i++) {
            nums[i] = Integer.parseInt(st.nextToken());
        }

        Solution sol = new Solution();
        int[] ans = sol.subsets(nums);
        System.out.print(""["");
        for (int i = 0; i < ans.length; i++) {
            System.out.print(ans[i] + (i == ans.length - 1 ? ""]"" : "",""));
        }
        System.out.println();
    }
}"
55,Word Search,"Given an m x n grid of characters board and a string word, return true if word exists in the grid.
The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.
Example 1:
Input: board = [[""A"",""B"",""C"",""E""],[""S"",""F"",""C"",""S""],[""A"",""D"",""E"",""E""]], word = ""ABCCED""
Output: true
Example 2:
Input: board = [[""A"",""B"",""C"",""E""],[""S"",""F"",""C"",""S""],[""A"",""D"",""E"",""E""]], word = ""SEE""
Output: true
Example 3:
Input: board = [[""A"",""B"",""C"",""E""],[""S"",""F"",""C"",""S""],[""A"",""D"",""E"",""E""]], word = ""ABCB""
Output: false
Constraints:
m == board.length
n = board[i].length
1 <= m, n <= 6
1 <= word.length <= 15
board and word consists of only lowercase and uppercase English letters.
Follow up: Could you use search pruning to make your solution faster with a larger board ?",Medium,"Array, String, Backtracking, Depth-First Search, Matrix","Test Case 1:
Input: board = [[""A"",""B"",""C"",""E""],[""S"",""F"",""C"",""S""],[""A"",""D"",""E"",""E""]], word = ""ABCCED""
Output: true

Test Case 2:
Input: board = [[""A"",""B"",""C"",""E""],[""S"",""F"",""C"",""S""],[""A"",""D"",""E"",""E""]], word = ""SEE""
Output: true

Test Case 3:
Input: board = [[""A"",""B"",""C"",""E""],[""S"",""F"",""C"",""S""],[""A"",""D"",""E"",""E""]], word = ""ABCB""
Output: false","[[""A"",""B"",""C"",""E""],[""S"",""F"",""C"",""S""],[""A"",""D"",""E"",""E""]]
ABCCED

[[""A"",""B"",""C"",""E""],[""S"",""F"",""C"",""S""],[""A"",""D"",""E"",""E""]]
SEE

[[""A"",""B"",""C"",""E""],[""S"",""F"",""C"",""S""],[""A"",""D"",""E"",""E""]]
ABCB","true
true
false","class Solution:
    def exist(self, board: List[List[str]], word: str) -> bool:
        ","class Solution {
public:
    bool exist(vector<vector<char>>& board, string word) {
        
    }
};","class Solution {
    public boolean exist(char[][] board, String word) {
        
    }
}","import sys, json, math, itertools, collections","if __name__ == ""__main__"":
    data = sys.stdin.read().strip().splitlines()
    line_idx = 0

    board = data[line_idx]
    line_idx += 1
    word = data[line_idx]
    line_idx += 1

    sol = Solution()
    ans = sol.exist(board, word)

    if isinstance(ans, list):
        print(json.dumps(ans, separators=(',', ':')))
    elif isinstance(ans, bool):
        print('true' if ans else 'false')
    else:
        print(ans)","#include <bits/stdc++.h>
using namespace std;","int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    string board;
    if (!(cin >> board)) return 0;
    string word;
    if (!(cin >> word)) return 0;

    Solution sol;
    bool ans = sol.exist(board, word);
    cout << (ans ? ""true"" : ""false"");
    cout << '\n';
    return 0;
}","import java.io.*;
import java.util.*;","public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        String board = br.readLine();
        String word = br.readLine();

        Solution sol = new Solution();
        boolean ans = sol.exist(board, word);
        System.out.print(ans ? ""true"" : ""false"");
        System.out.println();
    }
}"
56,Search in Rotated Sorted Array II,"There is an integer array nums sorted in non-decreasing order (not necessarily with distinct values).
Before being passed to your function, nums is rotated at an unknown pivot index k ( 0 <= k < nums.length ) such that the resulting array is [nums[k], nums[k+1],..., nums[n-1], nums[0], nums[1],..., nums[k-1]] ( 0-indexed ). For example, [0,1,2,4,4,4,5,6,6,7] might be rotated at pivot index 5 and become [4,5,6,6,7,0,1,2,4,4].
Given the array nums after the rotation and an integer target, return true if target is in nums, or false if it is not in nums.
You must decrease the overall operation steps as much as possible.
Example 1:
Input: nums = [2,5,6,0,0,1,2], target = 0
Output: true
Example 2:
Input: nums = [2,5,6,0,0,1,2], target = 3
Output: false
Constraints:
1 <= nums.length <= 5000
-10^4 <= nums[i] <= 10^4
nums is guaranteed to be rotated at some pivot.
-10^4 <= target <= 10^4
Follow up: This problem is similar to Search in Rotated Sorted Array, but nums may contain duplicates. Would this affect the runtime complexity? How and why?",Medium,"Array, Binary Search","Test Case 1:
Input: nums = [2,5,6,0,0,1,2], target = 0
Output: true

Test Case 2:
Input: nums = [2,5,6,0,0,1,2], target = 3
Output: false","7
2 5 6 0 0 1 2
0

7
2 5 6 0 0 1 2
3","true
false","class Solution:
    def search(self, nums: List[int], target: int) -> bool:
        ","class Solution {
public:
    bool search(vector<int>& nums, int target) {
        
    }
};","class Solution {
    public boolean search(int[] nums, int target) {
        
    }
}","import sys, json, math, itertools, collections","if __name__ == ""__main__"":
    data = sys.stdin.read().strip().splitlines()
    line_idx = 0

    n_nums = int(data[line_idx])
    line_idx += 1
    nums = list(map(int, data[line_idx].split()))
    line_idx += 1
    target = int(data[line_idx])
    line_idx += 1

    sol = Solution()
    ans = sol.search(nums, target)

    if isinstance(ans, list):
        print(json.dumps(ans, separators=(',', ':')))
    elif isinstance(ans, bool):
        print('true' if ans else 'false')
    else:
        print(ans)","#include <bits/stdc++.h>
using namespace std;","int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int n_nums;
    if (!(cin >> n_nums)) return 0;
    vector<int> nums(n_nums);
    for (int i = 0; i < n_nums; ++i) cin >> nums[i];
    int target;
    if (!(cin >> target)) return 0;

    Solution sol;
    bool ans = sol.search(nums, target);
    cout << (ans ? ""true"" : ""false"");
    cout << '\n';
    return 0;
}","import java.io.*;
import java.util.*;","public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        int n_nums = Integer.parseInt(br.readLine());
        st = new StringTokenizer(br.readLine());
        int[] nums = new int[n_nums];
        for (int i = 0; i < n_nums; i++) {
            nums[i] = Integer.parseInt(st.nextToken());
        }
        int target = Integer.parseInt(br.readLine());

        Solution sol = new Solution();
        boolean ans = sol.search(nums, target);
        System.out.print(ans ? ""true"" : ""false"");
        System.out.println();
    }
}"
57,Largest Rectangle in Histogram,"Given an array of integers heights representing the histogram's bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram.
Example 1:
Input: heights = [2,1,5,6,2,3]
Output: 10
Explanation: The above is a histogram where width of each bar is 1. The largest rectangle is shown in the red area, which has an area = 10 units.
Example 2:
Input: heights = [2,4]
Output: 4
Constraints:
1 <= heights.length <= 10^5
0 <= heights[i] <= 10^4",Hard,"Array, Stack, Monotonic Stack","Test Case 1:
Input: heights = [2,1,5,6,2,3]
Output: 10
Explanation: The above is a histogram where width of each bar is 1.
The largest rectangle is shown in the red area, which has an area = 10 units.

Test Case 2:
Input: heights = [2,4]
Output: 4","6
2 1 5 6 2 3

2
2 4","10
4","class Solution:
    def largestRectangleArea(self, heights: List[int]) -> int:
        ","class Solution {
public:
    int largestRectangleArea(vector<int>& heights) {
        
    }
};","class Solution {
    public int largestRectangleArea(int[] heights) {
        
    }
}","import sys, json, math, itertools, collections","if __name__ == ""__main__"":
    data = sys.stdin.read().strip().splitlines()
    line_idx = 0

    n_heights = int(data[line_idx])
    line_idx += 1
    heights = list(map(int, data[line_idx].split()))
    line_idx += 1

    sol = Solution()
    ans = sol.largestRectangleArea(heights)

    if isinstance(ans, list):
        print(json.dumps(ans, separators=(',', ':')))
    elif isinstance(ans, bool):
        print('true' if ans else 'false')
    else:
        print(ans)","#include <bits/stdc++.h>
using namespace std;","int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int n_heights;
    if (!(cin >> n_heights)) return 0;
    vector<int> heights(n_heights);
    for (int i = 0; i < n_heights; ++i) cin >> heights[i];

    Solution sol;
    auto ans = sol.largestRectangleArea(heights);
    cout << ans;
    cout << '\n';
    return 0;
}","import java.io.*;
import java.util.*;","public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        int n_heights = Integer.parseInt(br.readLine());
        st = new StringTokenizer(br.readLine());
        int[] heights = new int[n_heights];
        for (int i = 0; i < n_heights; i++) {
            heights[i] = Integer.parseInt(st.nextToken());
        }

        Solution sol = new Solution();
        var ans = sol.largestRectangleArea(heights);
        System.out.print(ans);
        System.out.println();
    }
}"
58,Maximal Rectangle,"Given a rows x cols binary matrix filled with 0 's and 1 's, find the largest rectangle containing only 1 's and return its area.
Example 1:
Input: matrix = [[""1"",""0"",""1"",""0"",""0""],[""1"",""0"",""1"",""1"",""1""],[""1"",""1"",""1"",""1"",""1""],[""1"",""0"",""0"",""1"",""0""]]
Output: 6
Explanation: The maximal rectangle is shown in the above picture.
Example 2:
Input: matrix = [[""0""]]
Output: 0
Example 3:
Input: matrix = [[""1""]]
Output: 1
Constraints:
rows == matrix.length
cols == matrix[i].length
1 <= row, cols <= 200
matrix[i][j] is '0' or '1'.",Hard,"Array, Dynamic Programming, Stack, Matrix, Monotonic Stack","Test Case 1:
Input: matrix = [[""1"",""0"",""1"",""0"",""0""],[""1"",""0"",""1"",""1"",""1""],[""1"",""1"",""1"",""1"",""1""],[""1"",""0"",""0"",""1"",""0""]]
Output: 6
Explanation: The maximal rectangle is shown in the above picture.

Test Case 2:
Input: matrix = [[""0""]]
Output: 0

Test Case 3:
Input: matrix = [[""1""]]
Output: 1","[[""1"",""0"",""1"",""0"",""0""],[""1"",""0"",""1"",""1"",""1""],[""1"",""1"",""1"",""1"",""1""],[""1"",""0"",""0"",""1"",""0""]]

[[""0""]]

[[""1""]]","6
0
1","class Solution:
    def maximalRectangle(self, matrix: List[List[str]]) -> int:
        ","class Solution {
public:
    int maximalRectangle(vector<vector<char>>& matrix) {
        
    }
};","class Solution {
    public int maximalRectangle(char[][] matrix) {
        
    }
}","import sys, json, math, itertools, collections","if __name__ == ""__main__"":
    data = sys.stdin.read().strip().splitlines()
    line_idx = 0

    matrix = data[line_idx]
    line_idx += 1

    sol = Solution()
    ans = sol.maximalRectangle(matrix)

    if isinstance(ans, list):
        print(json.dumps(ans, separators=(',', ':')))
    elif isinstance(ans, bool):
        print('true' if ans else 'false')
    else:
        print(ans)","#include <bits/stdc++.h>
using namespace std;","int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    string matrix;
    if (!(cin >> matrix)) return 0;

    Solution sol;
    auto ans = sol.maximalRectangle(matrix);
    cout << ans;
    cout << '\n';
    return 0;
}","import java.io.*;
import java.util.*;","public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        String matrix = br.readLine();

        Solution sol = new Solution();
        var ans = sol.maximalRectangle(matrix);
        System.out.print(ans);
        System.out.println();
    }
}"
59,Merge Sorted Array,"You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.
Merge nums1 and nums2 into a single array sorted in non-decreasing order.
The final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.
Example 1:
Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
Output: [1,2,2,3,5,6]
Explanation: The arrays we are merging are [1,2,3] and [2,5,6]. The result of the merge is [ 1, 2,2, 3,5,6] with the underlined elements coming from nums1.
Example 2:
Input: nums1 = [1], m = 1, nums2 = [], n = 0
Output: [1]
Explanation: The arrays we are merging are [1] and []. The result of the merge is [1].
Example 3:
Input: nums1 = [0], m = 0, nums2 = [1], n = 1
Output: [1]
Explanation: The arrays we are merging are [] and [1]. The result of the merge is [1]. Note that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1.
Constraints:
nums1.length == m + n
nums2.length == n
0 <= m, n <= 200
1 <= m + n <= 200
-10^9 <= nums1[i], nums2[j] <= 10^9
Follow up: Can you come up with an algorithm that runs in O(m + n) time?",Easy,"Array, Two Pointers, Sorting","Test Case 1:
Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
Output: [1,2,2,3,5,6]
Explanation: The arrays we are merging are [1,2,3] and [2,5,6].
The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.

Test Case 2:
Input: nums1 = [1], m = 1, nums2 = [], n = 0
Output: [1]
Explanation: The arrays we are merging are [1] and [].
The result of the merge is [1].

Test Case 3:
Input: nums1 = [0], m = 0, nums2 = [1], n = 1
Output: [1]
Explanation: The arrays we are merging are [] and [1].
The result of the merge is [1].
Note that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1.","6
1 2 3 0 0 0
3
3
2 5 6
3

1
1
1
0
0

1
0
0
1
1
1","[1,2,2,3,5,6]
[1]
[1]","class Solution:
    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:
        """"""
        Do not return anything, modify nums1 in-place instead.
        """"""
        ","class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        
    }
};","class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        
    }
}","import sys, json, math, itertools, collections","if __name__ == ""__main__"":
    data = sys.stdin.read().strip().splitlines()
    line_idx = 0

    n_nums1 = int(data[line_idx])
    line_idx += 1
    nums1 = list(map(int, data[line_idx].split()))
    line_idx += 1
    m = int(data[line_idx])
    line_idx += 1
    n_nums2 = int(data[line_idx])
    line_idx += 1
    nums2 = list(map(int, data[line_idx].split()))
    line_idx += 1
    n = int(data[line_idx])
    line_idx += 1

    sol = Solution()
    ans = sol.merge(nums1, m, nums2, n)

    if isinstance(ans, list):
        print(json.dumps(ans, separators=(',', ':')))
    elif isinstance(ans, bool):
        print('true' if ans else 'false')
    else:
        print(ans)","#include <bits/stdc++.h>
using namespace std;","int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int n_nums1;
    if (!(cin >> n_nums1)) return 0;
    vector<int> nums1(n_nums1);
    for (int i = 0; i < n_nums1; ++i) cin >> nums1[i];
    int m;
    if (!(cin >> m)) return 0;
    int n_nums2;
    if (!(cin >> n_nums2)) return 0;
    vector<int> nums2(n_nums2);
    for (int i = 0; i < n_nums2; ++i) cin >> nums2[i];
    int n;
    if (!(cin >> n)) return 0;

    Solution sol;
    sol.merge(nums1, m, nums2, n);
    cout << '\n';
    return 0;
}","import java.io.*;
import java.util.*;","public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        int n_nums1 = Integer.parseInt(br.readLine());
        st = new StringTokenizer(br.readLine());
        int[] nums1 = new int[n_nums1];
        for (int i = 0; i < n_nums1; i++) {
            nums1[i] = Integer.parseInt(st.nextToken());
        }
        int m = Integer.parseInt(br.readLine());
        int n_nums2 = Integer.parseInt(br.readLine());
        st = new StringTokenizer(br.readLine());
        int[] nums2 = new int[n_nums2];
        for (int i = 0; i < n_nums2; i++) {
            nums2[i] = Integer.parseInt(st.nextToken());
        }
        int n = Integer.parseInt(br.readLine());

        Solution sol = new Solution();
        sol.merge(nums1, m, nums2, n);
        System.out.println();
    }
}"
60,Gray Code,"An n-bit gray code sequence is a sequence of 2^n integers where:
Every integer is in the inclusive range [0, 2^n - 1],
The first integer is 0,
An integer appears no more than once in the sequence,
The binary representation of every pair of adjacent integers differs by exactly one bit, and
The binary representation of the first and last integers differs by exactly one bit.
Given an integer n, return any valid n-bit gray code sequence.
Example 1:
Input: n = 2
Output: [0,1,3,2]
Explanation:
The binary representation of [0,1,3,2] is [00,01,11,10]. 
- 00 and 01 differ by one bit 
- 01 and 11 differ by one bit
- 11 and 10 differ by one bit
- 10 and 00 differ by one bit 
[0,2,3,1] is also a valid gray code sequence, whose binary representation is [00,10,11,01]. 
- 00 and 10 differ by one bit 
- 10 and 11 differ by one bit 
- 11 and 01 differ by one bit
- 01 and 00 differ by one bit
Example 2:
Input: n = 1
Output: [0,1]
Constraints:
1 <= n <= 16",Medium,"Math, Backtracking, Bit Manipulation","Test Case 1:
Input: n = 2
Output: [0,1,3,2]
Explanation:
The binary representation of [0,1,3,2] is [00,01,11,10].
- 00 and 01 differ by one bit
- 01 and 11 differ by one bit
- 11 and 10 differ by one bit
- 10 and 00 differ by one bit
[0,2,3,1] is also a valid gray code sequence, whose binary representation is [00,10,11,01].
- 00 and 10 differ by one bit
- 10 and 11 differ by one bit
- 11 and 01 differ by one bit
- 01 and 00 differ by one bit

Test Case 2:
Input: n = 1
Output: [0,1]","2

1","[0,1,3,2]
[0,1]","class Solution:
    def grayCode(self, n: int) -> List[int]:
        ","class Solution {
public:
    vector<int> grayCode(int n) {
        
    }
};","class Solution {
    public List<Integer> grayCode(int n) {
        
    }
}","import sys, json, math, itertools, collections","if __name__ == ""__main__"":
    data = sys.stdin.read().strip().splitlines()
    line_idx = 0

    n = int(data[line_idx])
    line_idx += 1

    sol = Solution()
    ans = sol.grayCode(n)

    if isinstance(ans, list):
        print(json.dumps(ans, separators=(',', ':')))
    elif isinstance(ans, bool):
        print('true' if ans else 'false')
    else:
        print(ans)","#include <bits/stdc++.h>
using namespace std;","int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int n;
    if (!(cin >> n)) return 0;

    Solution sol;
    vector<int> ans = sol.grayCode(n);
    cout << '[';
    for (size_t i = 0; i < ans.size(); ++i) {
        cout << ans[i] << (i + 1 == ans.size() ? ']' : ',');
    }
    cout << '\n';
    return 0;
}","import java.io.*;
import java.util.*;","public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        int n = Integer.parseInt(br.readLine());

        Solution sol = new Solution();
        int[] ans = sol.grayCode(n);
        System.out.print(""["");
        for (int i = 0; i < ans.length; i++) {
            System.out.print(ans[i] + (i == ans.length - 1 ? ""]"" : "",""));
        }
        System.out.println();
    }
}"
61,Subsets II,"Given an integer array nums that may contain duplicates, return all possible
subsets (the power set).
The solution set must not contain duplicate subsets. Return the solution in any order.
Example 1:
Input: nums = [1,2,2]
Output: [[],[1],[1,2],[1,2,2],[2],[2,2]]
Example 2:
Input: nums = [0]
Output: [[],[0]]
Constraints:
1 <= nums.length <= 10
-10 <= nums[i] <= 10",Medium,"Array, Backtracking, Bit Manipulation","Test Case 1:
Input: nums = [1,2,2]
Output: [[],[1],[1,2],[1,2,2],[2],[2,2]]

Test Case 2:
Input: nums = [0]
Output: [[],[0]]","3
1 2 2

1
0","[[],[1],[1,2],[1,2,2],[2],[2,2]]
[[],[0]]","class Solution:
    def subsetsWithDup(self, nums: List[int]) -> List[List[int]]:
        ","class Solution {
public:
    vector<vector<int>> subsetsWithDup(vector<int>& nums) {
        
    }
};","class Solution {
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        
    }
}","import sys, json, math, itertools, collections","if __name__ == ""__main__"":
    data = sys.stdin.read().strip().splitlines()
    line_idx = 0

    n_nums = int(data[line_idx])
    line_idx += 1
    nums = list(map(int, data[line_idx].split()))
    line_idx += 1

    sol = Solution()
    ans = sol.subsetsWithDup(nums)

    if isinstance(ans, list):
        print(json.dumps(ans, separators=(',', ':')))
    elif isinstance(ans, bool):
        print('true' if ans else 'false')
    else:
        print(ans)","#include <bits/stdc++.h>
using namespace std;","int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int n_nums;
    if (!(cin >> n_nums)) return 0;
    vector<int> nums(n_nums);
    for (int i = 0; i < n_nums; ++i) cin >> nums[i];

    Solution sol;
    vector<vector<int>> ans = sol.subsetsWithDup(nums);
    cout << '[';
    for (size_t i = 0; i < ans.size(); ++i) {
        cout << '[';
        for (size_t j = 0; j < ans[i].size(); ++j) {
            cout << ans[i][j] << (j + 1 == ans[i].size() ? ']' : ',');
        }
        cout << (i + 1 == ans.size() ? ']' : ',');
    }
    cout << '\n';
    return 0;
}","import java.io.*;
import java.util.*;","public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        int n_nums = Integer.parseInt(br.readLine());
        st = new StringTokenizer(br.readLine());
        int[] nums = new int[n_nums];
        for (int i = 0; i < n_nums; i++) {
            nums[i] = Integer.parseInt(st.nextToken());
        }

        Solution sol = new Solution();
        int[] ans = sol.subsetsWithDup(nums);
        System.out.print(""["");
        for (int i = 0; i < ans.length; i++) {
            System.out.print(ans[i] + (i == ans.length - 1 ? ""]"" : "",""));
        }
        System.out.println();
    }
}"
62,Restore IP Addresses,"A valid IP address consists of exactly four integers separated by single dots. Each integer is between 0 and 255 ( inclusive ) and cannot have leading zeros.
For example, ""0.1.2.201"" and ""192.168.1.1"" are valid IP addresses, but ""0.011.255.245"", ""192.168.1.312"" and ""192.168@1.1"" are invalid IP addresses.
Given a string s containing only digits, return all possible valid IP addresses that can be formed by inserting dots into s. You are not allowed to reorder or remove any digits in s. You may return the valid IP addresses in any order.
Example 1:
Input: s = ""25525511135""
Output: [""255.255.11.135"",""255.255.111.35""]
Example 2:
Input: s = ""0000""
Output: [""0.0.0.0""]
Example 3:
Input: s = ""101023""
Output: [""1.0.10.23"",""1.0.102.3"",""10.1.0.23"",""10.10.2.3"",""101.0.2.3""]
Constraints:
1 <= s.length <= 20
s consists of digits only.",Medium,"String, Backtracking","Test Case 1:
Input: s = ""25525511135""
Output: [""255.255.11.135"",""255.255.111.35""]

Test Case 2:
Input: s = ""0000""
Output: [""0.0.0.0""]

Test Case 3:
Input: s = ""101023""
Output: [""1.0.10.23"",""1.0.102.3"",""10.1.0.23"",""10.10.2.3"",""101.0.2.3""]","25525511135

0000

101023","[""255.255.11.135"",""255.255.111.35""]
[""0.0.0.0""]
[""1.0.10.23"",""1.0.102.3"",""10.1.0.23"",""10.10.2.3"",""101.0.2.3""]","class Solution:
    def restoreIpAddresses(self, s: str) -> List[str]:
        ","class Solution {
public:
    vector<string> restoreIpAddresses(string s) {
        
    }
};","class Solution {
    public List<String> restoreIpAddresses(String s) {
        
    }
}","import sys, json, math, itertools, collections","if __name__ == ""__main__"":
    data = sys.stdin.read().strip().splitlines()
    line_idx = 0

    s = data[line_idx]
    line_idx += 1

    sol = Solution()
    ans = sol.restoreIpAddresses(s)

    if isinstance(ans, list):
        print(json.dumps(ans, separators=(',', ':')))
    elif isinstance(ans, bool):
        print('true' if ans else 'false')
    else:
        print(ans)","#include <bits/stdc++.h>
using namespace std;","int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    string s;
    if (!(cin >> s)) return 0;

    Solution sol;
    vector<string> ans = sol.restoreIpAddresses(s);

    cout << '[';
    for (size_t i = 0; i < ans.size(); ++i) {
        cout << '""' << ans[i] << '""' << (i + 1 == ans.size() ? ']' : ',');
    }
    cout << '
';
    return 0;
}","import java.io.*;
import java.util.*;","public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        String s = br.readLine();

        Solution sol = new Solution();
        String ans = sol.restoreIpAddresses(s);
        System.out.print(ans);
        System.out.println();
    }
}"
63,Interleaving String,"Given strings s1, s2, and s3, find whether s3 is formed by an interleaving of s1 and s2.
An interleaving of two strings s and t is a configuration where s and t are divided into n and m
substrings respectively, such that:
s = s[1] + s[2] + ... + s[n]
t = t[1] + t[2] + ... + t [m]
|n - m| <= 1
The interleaving is s[1] + t[1] + s[2] + t[2] + s[3] + t[3] +... or t[1] + s[1] + t[2] + s[2] + t[3] + s[3] +...
Note:
a + b is the concatenation of strings a and b.
Example 1:
Input: s1 = ""aabcc"", s2 = ""dbbca"", s3 = ""aadbbcbcac""
Output: true
Explanation: One way to obtain s3 is: Split s1 into s1 = ""aa"" + ""bc"" + ""c"", and s2 into s2 = ""dbbc"" + ""a"". Interleaving the two splits, we get ""aa"" + ""dbbc"" + ""bc"" + ""a"" + ""c"" = ""aadbbcbcac"". Since s3 can be obtained by interleaving s1 and s2, we return true.
Example 2:
Input: s1 = ""aabcc"", s2 = ""dbbca"", s3 = ""aadbbbaccc""
Output: false
Explanation: Notice how it is impossible to interleave s2 with any other string to obtain s3.
Example 3:
Input: s1 = """", s2 = """", s3 = """"
Output: true
Constraints:
0 <= s1.length, s2.length <= 100
0 <= s3.length <= 200
s1, s2, and s3 consist of lowercase English letters.
Follow up: Could you solve it using only O(s2.length) additional memory space?",Medium,"String, Dynamic Programming","Test Case 1:
Input: s1 = ""aabcc"", s2 = ""dbbca"", s3 = ""aadbbcbcac""
Output: true
Explanation: One way to obtain s3 is:
Split s1 into s1 = ""aa"" + ""bc"" + ""c"", and s2 into s2 = ""dbbc"" + ""a"".
Interleaving the two splits, we get ""aa"" + ""dbbc"" + ""bc"" + ""a"" + ""c"" = ""aadbbcbcac"".
Since s3 can be obtained by interleaving s1 and s2, we return true.

Test Case 2:
Input: s1 = ""aabcc"", s2 = ""dbbca"", s3 = ""aadbbbaccc""
Output: false
Explanation: Notice how it is impossible to interleave s2 with any other string to obtain s3.

Test Case 3:
Input: s1 = """", s2 = """", s3 = """"
Output: true","aabcc
dbbca
aadbbcbcac

aabcc
dbbca
aadbbbaccc



","true
false
true","class Solution:
    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:
        ","class Solution {
public:
    bool isInterleave(string s1, string s2, string s3) {
        
    }
};","class Solution {
    public boolean isInterleave(String s1, String s2, String s3) {
        
    }
}","import sys, json, math, itertools, collections","if __name__ == ""__main__"":
    data = sys.stdin.read().strip().splitlines()
    line_idx = 0

    s1 = data[line_idx]
    line_idx += 1
    s2 = data[line_idx]
    line_idx += 1
    s3 = data[line_idx]
    line_idx += 1

    sol = Solution()
    ans = sol.isInterleave(s1, s2, s3)

    if isinstance(ans, list):
        print(json.dumps(ans, separators=(',', ':')))
    elif isinstance(ans, bool):
        print('true' if ans else 'false')
    else:
        print(ans)","#include <bits/stdc++.h>
using namespace std;","int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    string s1;
    if (!(cin >> s1)) return 0;
    string s2;
    if (!(cin >> s2)) return 0;
    string s3;
    if (!(cin >> s3)) return 0;

    Solution sol;
    bool ans = sol.isInterleave(s1, s2, s3);
    cout << (ans ? ""true"" : ""false"");
    cout << '\n';
    return 0;
}","import java.io.*;
import java.util.*;","public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        String s1 = br.readLine();
        String s2 = br.readLine();
        String s3 = br.readLine();

        Solution sol = new Solution();
        boolean ans = sol.isInterleave(s1, s2, s3);
        System.out.print(ans ? ""true"" : ""false"");
        System.out.println();
    }
}"
64,Distinct Subsequences,"Given two strings s and t, return the number of distinct subsequences of s which equals t.
The test cases are generated so that the answer fits on a 32-bit signed integer.
Example 1:
Input: s = ""rabbbit"", t = ""rabbit""
Output: 3
Explanation:
As shown below, there are 3 ways you can generate ""rabbit"" from s.
rabb b it
ra b bbit
rab b bit
Example 2:
Input: s = ""babgbag"", t = ""bag""
Output: 5
Explanation:
As shown below, there are 5 ways you can generate ""bag"" from s.
ba b g bag
ba bgba g
b abgb ag
ba b gb ag
babg bag
Constraints:
1 <= s.length, t.length <= 1000
s and t consist of English letters.",Hard,"String, Dynamic Programming","Test Case 1:
Input: s = ""rabbbit"", t = ""rabbit""
Output: 3
Explanation:
As shown below, there are 3 ways you can generate ""rabbit"" from s.
rabbbit
rabbbit
rabbbit

Test Case 2:
Input: s = ""babgbag"", t = ""bag""
Output: 5
Explanation:
As shown below, there are 5 ways you can generate ""bag"" from s.
babgbag
babgbag
babgbag
babgbag
babgbag","rabbbit
rabbit

babgbag
bag","3
5","class Solution:
    def numDistinct(self, s: str, t: str) -> int:
        ","class Solution {
public:
    int numDistinct(string s, string t) {
        
    }
};","class Solution {
    public int numDistinct(String s, String t) {
        
    }
}","import sys, json, math, itertools, collections","if __name__ == ""__main__"":
    data = sys.stdin.read().strip().splitlines()
    line_idx = 0

    s = data[line_idx]
    line_idx += 1
    t = data[line_idx]
    line_idx += 1

    sol = Solution()
    ans = sol.numDistinct(s, t)

    if isinstance(ans, list):
        print(json.dumps(ans, separators=(',', ':')))
    elif isinstance(ans, bool):
        print('true' if ans else 'false')
    else:
        print(ans)","#include <bits/stdc++.h>
using namespace std;","int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    string s;
    if (!(cin >> s)) return 0;
    string t;
    if (!(cin >> t)) return 0;

    Solution sol;
    auto ans = sol.numDistinct(s, t);
    cout << ans;
    cout << '\n';
    return 0;
}","import java.io.*;
import java.util.*;","public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        String s = br.readLine();
        String t = br.readLine();

        Solution sol = new Solution();
        var ans = sol.numDistinct(s, t);
        System.out.print(ans);
        System.out.println();
    }
}"
65,Pascal's Triangle,"Given an integer numRows, return the first numRows of Pascal's triangle.
In Pascal's triangle, each number is the sum of the two numbers directly above it.
Example 1:
Input: numRows = 5
Output: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]
Example 2:
Input: numRows = 1
Output: [[1]]
Constraints:
1 <= numRows <= 30",Easy,"Array, Dynamic Programming","Test Case 1:
Input: numRows = 5
Output: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]

Test Case 2:
Input: numRows = 1
Output: [[1]]","5

1","[[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]
[[1]]","class Solution:
    def generate(self, numRows: int) -> List[List[int]]:
        ","class Solution {
public:
    vector<vector<int>> generate(int numRows) {
        
    }
};","class Solution {
    public List<List<Integer>> generate(int numRows) {
        
    }
}","import sys, json, math, itertools, collections","if __name__ == ""__main__"":
    data = sys.stdin.read().strip().splitlines()
    line_idx = 0

    numRows = int(data[line_idx])
    line_idx += 1

    sol = Solution()
    ans = sol.generate(numRows)

    if isinstance(ans, list):
        print(json.dumps(ans, separators=(',', ':')))
    elif isinstance(ans, bool):
        print('true' if ans else 'false')
    else:
        print(ans)","#include <bits/stdc++.h>
using namespace std;","int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int numRows;
    if (!(cin >> numRows)) return 0;

    Solution sol;
    vector<vector<int>> ans = sol.generate(numRows);
    cout << '[';
    for (size_t i = 0; i < ans.size(); ++i) {
        cout << '[';
        for (size_t j = 0; j < ans[i].size(); ++j) {
            cout << ans[i][j] << (j + 1 == ans[i].size() ? ']' : ',');
        }
        cout << (i + 1 == ans.size() ? ']' : ',');
    }
    cout << '\n';
    return 0;
}","import java.io.*;
import java.util.*;","public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        int numRows = Integer.parseInt(br.readLine());

        Solution sol = new Solution();
        int[] ans = sol.generate(numRows);
        System.out.print(""["");
        for (int i = 0; i < ans.length; i++) {
            System.out.print(ans[i] + (i == ans.length - 1 ? ""]"" : "",""));
        }
        System.out.println();
    }
}"
66,Pascal's Triangle II,"Given an integer rowIndex, return the rowIndex-th ( 0-indexed ) row of the Pascal's triangle.
In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:
Example 1:
Input: rowIndex = 3
Output: [1,3,3,1]
Example 2:
Input: rowIndex = 0
Output: [1]
Example 3:
Input: rowIndex = 1
Output: [1,1]
Constraints:
0 <= rowIndex <= 33
Follow up: Could you optimize your algorithm to use only O(rowIndex) extra space?",Easy,"Array, Dynamic Programming","Test Case 1:
Input: rowIndex = 3
Output: [1,3,3,1]

Test Case 2:
Input: rowIndex = 0
Output: [1]

Test Case 3:
Input: rowIndex = 1
Output: [1,1]","3

0

1","[1,3,3,1]
[1]
[1,1]","class Solution:
    def getRow(self, rowIndex: int) -> List[int]:
        ","class Solution {
public:
    vector<int> getRow(int rowIndex) {
        
    }
};","class Solution {
    public List<Integer> getRow(int rowIndex) {
        
    }
}","import sys, json, math, itertools, collections","if __name__ == ""__main__"":
    data = sys.stdin.read().strip().splitlines()
    line_idx = 0

    rowIndex = int(data[line_idx])
    line_idx += 1

    sol = Solution()
    ans = sol.getRow(rowIndex)

    if isinstance(ans, list):
        print(json.dumps(ans, separators=(',', ':')))
    elif isinstance(ans, bool):
        print('true' if ans else 'false')
    else:
        print(ans)","#include <bits/stdc++.h>
using namespace std;","int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int rowIndex;
    if (!(cin >> rowIndex)) return 0;

    Solution sol;
    vector<int> ans = sol.getRow(rowIndex);
    cout << '[';
    for (size_t i = 0; i < ans.size(); ++i) {
        cout << ans[i] << (i + 1 == ans.size() ? ']' : ',');
    }
    cout << '\n';
    return 0;
}","import java.io.*;
import java.util.*;","public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        int rowIndex = Integer.parseInt(br.readLine());

        Solution sol = new Solution();
        int[] ans = sol.getRow(rowIndex);
        System.out.print(""["");
        for (int i = 0; i < ans.length; i++) {
            System.out.print(ans[i] + (i == ans.length - 1 ? ""]"" : "",""));
        }
        System.out.println();
    }
}"
67,Triangle,"Given a triangle array, return the minimum path sum from top to bottom.
For each step, you may move to an adjacent number of the row below. More formally, if you are on index i on the current row, you may move to either index i or index i + 1 on the next row.
Example 1:
Input: triangle = [[2],[3,4],[6,5,7],[4,1,8,3]]
Output: 11
Explanation: The triangle looks like:
   '2'
  '3' 4
  6 '5' 7
 4 '1' 8 3
The minimum path sum from top to bottom is 2 + 3 + 5 + 1 = 11.
Example 2:
Input: triangle = [[-10]]
Output: -10
Constraints:
1 <= triangle.length <= 200
triangle[0].length == 1
triangle[i].length == triangle[i - 1].length + 1
-10^4 <= triangle[i][j] <= 10^4
Follow up: Could you do this using only O(n) extra space, where n is the total number of rows in the triangle?",Medium,"Array, Dynamic Programming","Test Case 1:
Input: triangle = [[2],[3,4],[6,5,7],[4,1,8,3]]
Output: 11
Explanation: The triangle looks like:
   2
  3 4
 6 5 7
4 1 8 3
The minimum path sum from top to bottom is 2 + 3 + 5 + 1 = 11 (underlined above).

Test Case 2:
Input: triangle = [[-10]]
Output: -10","4 1
2
3 4
6 5 7
4 1 8 3

1 1
-10","11
-10","class Solution:
    def minimumTotal(self, triangle: List[List[int]]) -> int:
        ","class Solution {
public:
    int minimumTotal(vector<vector<int>>& triangle) {
        
    }
};","class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {
        
    }
}","import sys, json, math, itertools, collections","if __name__ == ""__main__"":
    data = sys.stdin.read().strip().splitlines()
    line_idx = 0

    n_triangle = int(data[line_idx])
    line_idx += 1
    triangle = list(map(int, data[line_idx].split()))
    line_idx += 1

    sol = Solution()
    ans = sol.minimumTotal(triangle)

    if isinstance(ans, list):
        print(json.dumps(ans, separators=(',', ':')))
    elif isinstance(ans, bool):
        print('true' if ans else 'false')
    else:
        print(ans)","#include <bits/stdc++.h>
using namespace std;","int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int m_triangle, n_triangle;
    if (!(cin >> m_triangle >> n_triangle)) return 0;
    vector<vector<int>> triangle(m_triangle, vector<int>(n_triangle));
    for (int i = 0; i < m_triangle; ++i) {
        for (int j = 0; j < n_triangle; ++j) {
            cin >> triangle[i][j];
        }
    }

    Solution sol;
    auto ans = sol.minimumTotal(triangle);
    cout << ans;
    cout << '\n';
    return 0;
}","import java.io.*;
import java.util.*;","public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        int n_triangle = Integer.parseInt(br.readLine());
        st = new StringTokenizer(br.readLine());
        int[] triangle = new int[n_triangle];
        for (int i = 0; i < n_triangle; i++) {
            triangle[i] = Integer.parseInt(st.nextToken());
        }

        Solution sol = new Solution();
        var ans = sol.minimumTotal(triangle);
        System.out.print(ans);
        System.out.println();
    }
}"
68,Best Time to Buy and Sell Stock,"You are given an array prices where prices[i] is the price of a given stock on the i th day.
You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.
Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.
Example 1:
Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5. Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.
Example 2:
Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transactions are done and the max profit = 0.
Constraints:
1 <= prices.length <= 10^5
0 <= prices[i] <= 10^4",Easy,"Array, Dynamic Programming","Test Case 1:
Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.

Test Case 2:
Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transactions are done and the max profit = 0.","6
7 1 5 3 6 4

5
7 6 4 3 1","5
0","class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        ","class Solution {
public:
    int maxProfit(vector<int>& prices) {
        
    }
};","class Solution {
    public int maxProfit(int[] prices) {
        
    }
}","import sys, json, math, itertools, collections","if __name__ == ""__main__"":
    data = sys.stdin.read().strip().splitlines()
    line_idx = 0

    n_prices = int(data[line_idx])
    line_idx += 1
    prices = list(map(int, data[line_idx].split()))
    line_idx += 1

    sol = Solution()
    ans = sol.maxProfit(prices)

    if isinstance(ans, list):
        print(json.dumps(ans, separators=(',', ':')))
    elif isinstance(ans, bool):
        print('true' if ans else 'false')
    else:
        print(ans)","#include <bits/stdc++.h>
using namespace std;","int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int n_prices;
    if (!(cin >> n_prices)) return 0;
    vector<int> prices(n_prices);
    for (int i = 0; i < n_prices; ++i) cin >> prices[i];

    Solution sol;
    auto ans = sol.maxProfit(prices);
    cout << ans;
    cout << '\n';
    return 0;
}","import java.io.*;
import java.util.*;","public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        int n_prices = Integer.parseInt(br.readLine());
        st = new StringTokenizer(br.readLine());
        int[] prices = new int[n_prices];
        for (int i = 0; i < n_prices; i++) {
            prices[i] = Integer.parseInt(st.nextToken());
        }

        Solution sol = new Solution();
        var ans = sol.maxProfit(prices);
        System.out.print(ans);
        System.out.println();
    }
}"
69,Best Time to Buy and Sell Stock II,"You are given an integer array prices where prices[i] is the price of a given stock on the i th day.
On each day, you may decide to buy and/or sell the stock. You can only hold at most one share of the stock at any time. However, you can buy it then immediately sell it on the same day.
Find and return the maximum profit you can achieve.
Example 1:
Input: prices = [7,1,5,3,6,4]
Output: 7
Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4. Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3. Total profit is 4 + 3 = 7.
Example 2:
Input: prices = [1,2,3,4,5]
Output: 4
Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4. Total profit is 4.
Example 3:
Input: prices = [7,6,4,3,1]
Output: 0
Explanation: There is no way to make a positive profit, so we never buy the stock to achieve the maximum profit of 0.
Constraints:
1 <= prices.length <= 3 * 10^4
0 <= prices[i] <= 10^4",Medium,"Array, Dynamic Programming, Greedy","Test Case 1:
Input: prices = [7,1,5,3,6,4]
Output: 7
Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.
Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.
Total profit is 4 + 3 = 7.

Test Case 2:
Input: prices = [1,2,3,4,5]
Output: 4
Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.
Total profit is 4.

Test Case 3:
Input: prices = [7,6,4,3,1]
Output: 0
Explanation: There is no way to make a positive profit, so we never buy the stock to achieve the maximum profit of 0.","6
7 1 5 3 6 4

5
1 2 3 4 5

5
7 6 4 3 1","7
4
0","class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        ","class Solution {
public:
    int maxProfit(vector<int>& prices) {
        
    }
};","class Solution {
    public int maxProfit(int[] prices) {
        
    }
}","import sys, json, math, itertools, collections","if __name__ == ""__main__"":
    data = sys.stdin.read().strip().splitlines()
    line_idx = 0

    n_prices = int(data[line_idx])
    line_idx += 1
    prices = list(map(int, data[line_idx].split()))
    line_idx += 1

    sol = Solution()
    ans = sol.maxProfit(prices)

    if isinstance(ans, list):
        print(json.dumps(ans, separators=(',', ':')))
    elif isinstance(ans, bool):
        print('true' if ans else 'false')
    else:
        print(ans)","#include <bits/stdc++.h>
using namespace std;","int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int n_prices;
    if (!(cin >> n_prices)) return 0;
    vector<int> prices(n_prices);
    for (int i = 0; i < n_prices; ++i) cin >> prices[i];

    Solution sol;
    auto ans = sol.maxProfit(prices);
    cout << ans;
    cout << '\n';
    return 0;
}","import java.io.*;
import java.util.*;","public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        int n_prices = Integer.parseInt(br.readLine());
        st = new StringTokenizer(br.readLine());
        int[] prices = new int[n_prices];
        for (int i = 0; i < n_prices; i++) {
            prices[i] = Integer.parseInt(st.nextToken());
        }

        Solution sol = new Solution();
        var ans = sol.maxProfit(prices);
        System.out.print(ans);
        System.out.println();
    }
}"
70,Best Time to Buy and Sell Stock III,"You are given an array prices where prices[i] is the price of a given stock on the i th day.
Find the maximum profit you can achieve. You may complete at most two transactions.
Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).
Example 1:
Input: prices = [3,3,5,0,0,3,1,4]
Output: 6
Explanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3. Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.
Example 2:
Input: prices = [1,2,3,4,5]
Output: 4
Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4. Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again.
Example 3:
Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transaction is done, i.e. max profit = 0.
Constraints:
1 <= prices.length <= 10^5
0 <= prices[i] <= 10^5",Hard,"Array, Dynamic Programming","Test Case 1:
Input: prices = [3,3,5,0,0,3,1,4]
Output: 6
Explanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.
Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.

Test Case 2:
Input: prices = [1,2,3,4,5]
Output: 4
Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.
Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again.

Test Case 3:
Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transaction is done, i.e. max profit = 0.","8
3 3 5 0 0 3 1 4

5
1 2 3 4 5

5
7 6 4 3 1","6
4
0","class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        ","class Solution {
public:
    int maxProfit(vector<int>& prices) {
        
    }
};","class Solution {
    public int maxProfit(int[] prices) {
        
    }
}","import sys, json, math, itertools, collections","if __name__ == ""__main__"":
    data = sys.stdin.read().strip().splitlines()
    line_idx = 0

    n_prices = int(data[line_idx])
    line_idx += 1
    prices = list(map(int, data[line_idx].split()))
    line_idx += 1

    sol = Solution()
    ans = sol.maxProfit(prices)

    if isinstance(ans, list):
        print(json.dumps(ans, separators=(',', ':')))
    elif isinstance(ans, bool):
        print('true' if ans else 'false')
    else:
        print(ans)","#include <bits/stdc++.h>
using namespace std;","int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int n_prices;
    if (!(cin >> n_prices)) return 0;
    vector<int> prices(n_prices);
    for (int i = 0; i < n_prices; ++i) cin >> prices[i];

    Solution sol;
    auto ans = sol.maxProfit(prices);
    cout << ans;
    cout << '\n';
    return 0;
}","import java.io.*;
import java.util.*;","public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        int n_prices = Integer.parseInt(br.readLine());
        st = new StringTokenizer(br.readLine());
        int[] prices = new int[n_prices];
        for (int i = 0; i < n_prices; i++) {
            prices[i] = Integer.parseInt(st.nextToken());
        }

        Solution sol = new Solution();
        var ans = sol.maxProfit(prices);
        System.out.print(ans);
        System.out.println();
    }
}"
71,Valid Palindrome,"A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.
Given a string s, return true if it is a palindrome, or false otherwise.
Example 1:
Input: s = ""A man, a plan, a canal: Panama""
Output: true
Explanation: ""amanaplanacanalpanama"" is a palindrome.
Example 2:
Input: s = ""race a car""
Output: false
Explanation: ""raceacar"" is not a palindrome.
Example 3:
Input: s = "" ""
Output: true
Explanation: s is an empty string """" after removing non-alphanumeric characters. Since an empty string reads the same forward and backward, it is a palindrome.
Constraints:
1 <= s.length <= 2 * 10^5
s consists only of printable ASCII characters.",Easy,"Two Pointers, String","Test Case 1:
Input: s = ""A man, a plan, a canal: Panama""
Output: true
Explanation: ""amanaplanacanalpanama"" is a palindrome.

Test Case 2:
Input: s = ""race a car""
Output: false
Explanation: ""raceacar"" is not a palindrome.

Test Case 3:
Input: s = "" ""
Output: true
Explanation: s is an empty string """" after removing non-alphanumeric characters.
Since an empty string reads the same forward and backward, it is a palindrome.","A man, a plan, a canal: Panama

race a car

","true
false
true","class Solution:
    def isPalindrome(self, s: str) -> bool:
        ","class Solution {
public:
    bool isPalindrome(string s) {
        
    }
};","class Solution {
    public boolean isPalindrome(String s) {
        
    }
}","import sys, json, math, itertools, collections","if __name__ == ""__main__"":
    data = sys.stdin.read().strip().splitlines()
    line_idx = 0

    s = data[line_idx]
    line_idx += 1

    sol = Solution()
    ans = sol.isPalindrome(s)

    if isinstance(ans, list):
        print(json.dumps(ans, separators=(',', ':')))
    elif isinstance(ans, bool):
        print('true' if ans else 'false')
    else:
        print(ans)","#include <bits/stdc++.h>
using namespace std;","int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    string s;
    if (!(cin >> s)) return 0;

    Solution sol;
    bool ans = sol.isPalindrome(s);
    cout << (ans ? ""true"" : ""false"");
    cout << '\n';
    return 0;
}","import java.io.*;
import java.util.*;","public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        String s = br.readLine();

        Solution sol = new Solution();
        boolean ans = sol.isPalindrome(s);
        System.out.print(ans ? ""true"" : ""false"");
        System.out.println();
    }
}"
72,Word Ladder II,"A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s[1] -> s[2] ->... -> s[k] such that:
Every adjacent pair of words differs by a single letter.
Every s[i] for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.
s[k] == endWord
Given two words, beginWord and endWord, and a dictionary wordList, return all the shortest transformation sequences from beginWord to endWord, or an empty list if no such sequence exists. Each sequence should be returned as a list of the words [beginWord, s[1], s[2],..., s[k] ].
Example 1:
Input: beginWord = ""hit"", endWord = ""cog"", wordList = [""hot"",""dot"",""dog"",""lot"",""log"",""cog""]
Output: [[""hit"",""hot"",""dot"",""dog"",""cog""],[""hit"",""hot"",""lot"",""log"",""cog""]]
Explanation: There are 2 shortest transformation sequences: ""hit"" -> ""hot"" -> ""dot"" -> ""dog"" -> ""cog"" ""hit"" -> ""hot"" -> ""lot"" -> ""log"" -> ""cog""
Example 2:
Input: beginWord = ""hit"", endWord = ""cog"", wordList = [""hot"",""dot"",""dog"",""lot"",""log""]
Output: []
Explanation: The endWord ""cog"" is not in wordList, therefore there is no valid transformation sequence.
Constraints:
1 <= beginWord.length <= 5
endWord.length == beginWord.length
1 <= wordList.length <= 500
wordList[i].length == beginWord.length
beginWord, endWord, and wordList[i] consist of lowercase English letters.
beginWord != endWord
All the words in wordList are unique.
The sum of all shortest transformation sequences does not exceed 10^5.",Hard,"Hash Table, String, Backtracking, Breadth-First Search","Test Case 1:
Input: beginWord = ""hit"", endWord = ""cog"", wordList = [""hot"",""dot"",""dog"",""lot"",""log"",""cog""]
Output: [[""hit"",""hot"",""dot"",""dog"",""cog""],[""hit"",""hot"",""lot"",""log"",""cog""]]
Explanation: There are 2 shortest transformation sequences:
""hit"" -> ""hot"" -> ""dot"" -> ""dog"" -> ""cog""
""hit"" -> ""hot"" -> ""lot"" -> ""log"" -> ""cog""

Test Case 2:
Input: beginWord = ""hit"", endWord = ""cog"", wordList = [""hot"",""dot"",""dog"",""lot"",""log""]
Output: []
Explanation: The endWord ""cog"" is not in wordList, therefore there is no valid transformation sequence.","hit
cog
[""hot"",""dot"",""dog"",""lot"",""log"",""cog""]

hit
cog
[""hot"",""dot"",""dog"",""lot"",""log""]","[[""hit"",""hot"",""dot"",""dog"",""cog""],[""hit"",""hot"",""lot"",""log"",""cog""]]
[]","class Solution:
    def findLadders(self, beginWord: str, endWord: str, wordList: List[str]) -> List[List[str]]:
        ","class Solution {
public:
    vector<vector<string>> findLadders(string beginWord, string endWord, vector<string>& wordList) {
        
    }
};","class Solution {
    public List<List<String>> findLadders(String beginWord, String endWord, List<String> wordList) {
        
    }
}","import sys, json, math, itertools, collections","if __name__ == ""__main__"":
    data = sys.stdin.read().strip().splitlines()
    line_idx = 0

    beginWord = data[line_idx]
    line_idx += 1
    endWord = data[line_idx]
    line_idx += 1
    wordList = data[line_idx]
    line_idx += 1

    sol = Solution()
    ans = sol.findLadders(beginWord, endWord, wordList)

    if isinstance(ans, list):
        print(json.dumps(ans, separators=(',', ':')))
    elif isinstance(ans, bool):
        print('true' if ans else 'false')
    else:
        print(ans)","#include <bits/stdc++.h>
using namespace std;","int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    string beginWord;
    if (!(cin >> beginWord)) return 0;
    string endWord;
    if (!(cin >> endWord)) return 0;
    string wordList;
    if (!(cin >> wordList)) return 0;

    Solution sol;
    string ans = sol.findLadders(beginWord, endWord, wordList);
    cout << ans;
    cout << '\n';
    return 0;
}","import java.io.*;
import java.util.*;","public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        String beginWord = br.readLine();
        String endWord = br.readLine();
        String wordList = br.readLine();

        Solution sol = new Solution();
        String ans = sol.findLadders(beginWord, endWord, wordList);
        System.out.print(ans);
        System.out.println();
    }
}"
73,Word Ladder,"A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s[1] -> s[2] ->... -> s[k] such that:
Every adjacent pair of words differs by a single letter.
Every s i for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.
s[k] == endWord
Given two words, beginWord and endWord, and a dictionary wordList, return the number of words in the shortest transformation sequence from beginWord to endWord, or 0 if no such sequence exists.
Example 1:
Input: beginWord = ""hit"", endWord = ""cog"", wordList = [""hot"",""dot"",""dog"",""lot"",""log"",""cog""]
Output: 5
Explanation: One shortest transformation sequence is ""hit"" -> ""hot"" -> ""dot"" -> ""dog"" -> cog"", which is 5 words long.
Example 2:
Input: beginWord = ""hit"", endWord = ""cog"", wordList = [""hot"",""dot"",""dog"",""lot"",""log""]
Output: 0
Explanation: The endWord ""cog"" is not in wordList, therefore there is no valid transformation sequence.
Constraints:
1 <= beginWord.length <= 10
endWord.length == beginWord.length
1 <= wordList.length <= 5000
wordList[i].length == beginWord.length
beginWord, endWord, and wordList[i] consist of lowercase English letters.
beginWord != endWord
All the words in wordList are unique.",Hard,"Hash Table, String, Breadth-First Search","Test Case 1:
Input: beginWord = ""hit"", endWord = ""cog"", wordList = [""hot"",""dot"",""dog"",""lot"",""log"",""cog""]
Output: 5
Explanation: One shortest transformation sequence is ""hit"" -> ""hot"" -> ""dot"" -> ""dog"" -> cog"", which is 5 words long.

Test Case 2:
Input: beginWord = ""hit"", endWord = ""cog"", wordList = [""hot"",""dot"",""dog"",""lot"",""log""]
Output: 0
Explanation: The endWord ""cog"" is not in wordList, therefore there is no valid transformation sequence.","hit
cog
[""hot"",""dot"",""dog"",""lot"",""log"",""cog""]

hit
cog
[""hot"",""dot"",""dog"",""lot"",""log""]","5
0","class Solution:
    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:
        ","class Solution {
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        
    }
};","class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        
    }
}","import sys, json, math, itertools, collections","if __name__ == ""__main__"":
    data = sys.stdin.read().strip().splitlines()
    line_idx = 0

    beginWord = data[line_idx]
    line_idx += 1
    endWord = data[line_idx]
    line_idx += 1
    wordList = data[line_idx]
    line_idx += 1

    sol = Solution()
    ans = sol.ladderLength(beginWord, endWord, wordList)

    if isinstance(ans, list):
        print(json.dumps(ans, separators=(',', ':')))
    elif isinstance(ans, bool):
        print('true' if ans else 'false')
    else:
        print(ans)","#include <bits/stdc++.h>
using namespace std;","int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    string beginWord;
    if (!(cin >> beginWord)) return 0;
    string endWord;
    if (!(cin >> endWord)) return 0;
    string wordList;
    if (!(cin >> wordList)) return 0;

    Solution sol;
    auto ans = sol.ladderLength(beginWord, endWord, wordList);
    cout << ans;
    cout << '\n';
    return 0;
}","import java.io.*;
import java.util.*;","public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        String beginWord = br.readLine();
        String endWord = br.readLine();
        String wordList = br.readLine();

        Solution sol = new Solution();
        var ans = sol.ladderLength(beginWord, endWord, wordList);
        System.out.print(ans);
        System.out.println();
    }
}"
74,Longest Consecutive Sequence,"Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence.
You must write an algorithm that runs in O(n) time.
Example 1:
Input: nums = [100,4,200,1,3,2]
Output: 4
Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.
Example 2:
Input: nums = [0,3,7,2,5,8,4,6,0,1]
Output: 9
Example 3:
Input: nums = [1,0,1,2]
Output: 3
Constraints:
0 <= nums.length <= 10^5
-10^9 <= nums[i] <= 10^9",Medium,"Array, Hash Table, Union Find","Test Case 1:
Input: nums = [100,4,200,1,3,2]
Output: 4
Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.

Test Case 2:
Input: nums = [0,3,7,2,5,8,4,6,0,1]
Output: 9

Test Case 3:
Input: nums = [1,0,1,2]
Output: 3","6
100 4 200 1 3 2

10
0 3 7 2 5 8 4 6 0 1

4
1 0 1 2","4
9
3","class Solution:
    def longestConsecutive(self, nums: List[int]) -> int:
        ","class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        
    }
};","class Solution {
    public int longestConsecutive(int[] nums) {
        
    }
}","import sys, json, math, itertools, collections","if __name__ == ""__main__"":
    data = sys.stdin.read().strip().splitlines()
    line_idx = 0

    n_nums = int(data[line_idx])
    line_idx += 1
    nums = list(map(int, data[line_idx].split()))
    line_idx += 1

    sol = Solution()
    ans = sol.longestConsecutive(nums)

    if isinstance(ans, list):
        print(json.dumps(ans, separators=(',', ':')))
    elif isinstance(ans, bool):
        print('true' if ans else 'false')
    else:
        print(ans)","#include <bits/stdc++.h>
using namespace std;","int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int n_nums;
    if (!(cin >> n_nums)) return 0;
    vector<int> nums(n_nums);
    for (int i = 0; i < n_nums; ++i) cin >> nums[i];

    Solution sol;
    auto ans = sol.longestConsecutive(nums);
    cout << ans;
    cout << '\n';
    return 0;
}","import java.io.*;
import java.util.*;","public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        int n_nums = Integer.parseInt(br.readLine());
        st = new StringTokenizer(br.readLine());
        int[] nums = new int[n_nums];
        for (int i = 0; i < n_nums; i++) {
            nums[i] = Integer.parseInt(st.nextToken());
        }

        Solution sol = new Solution();
        var ans = sol.longestConsecutive(nums);
        System.out.print(ans);
        System.out.println();
    }
}"
75,Palindrome Partitioning,"Given a string s, partition s such that every substring of the partition is a palindrome. Return all possible palindrome partitioning of s.
Example 1:
Input: s = ""aab""
Output: [[""a"",""a"",""b""],[""aa"",""b""]]
Example 2:
Input: s = ""a""
Output: [[""a""]]
Constraints:
1 <= s.length <= 16
s contains only lowercase English letters.",Medium,"String, Dynamic Programming, Backtracking","Test Case 1:
Input: s = ""aab""
Output: [[""a"",""a"",""b""],[""aa"",""b""]]

Test Case 2:
Input: s = ""a""
Output: [[""a""]]","aab

a","[[""a"",""a"",""b""],[""aa"",""b""]]
[[""a""]]","class Solution:
    def partition(self, s: str) -> List[List[str]]:
        ","class Solution {
public:
    vector<vector<string>> partition(string s) {
        
    }
};","class Solution {
    public List<List<String>> partition(String s) {
        
    }
}","import sys, json, math, itertools, collections","if __name__ == ""__main__"":
    data = sys.stdin.read().strip().splitlines()
    line_idx = 0

    s = data[line_idx]
    line_idx += 1

    sol = Solution()
    ans = sol.partition(s)

    if isinstance(ans, list):
        print(json.dumps(ans, separators=(',', ':')))
    elif isinstance(ans, bool):
        print('true' if ans else 'false')
    else:
        print(ans)","#include <bits/stdc++.h>
using namespace std;","int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int n;
    if (!(cin >> n)) return 0;

    Solution sol;
    vector<vector<string>> ans = sol.partition(n);

    cout << '[';
    for (size_t i = 0; i < ans.size(); ++i) {
        cout << '[';
        for (size_t j = 0; j < ans[i].size(); ++j) {
            cout << '""' << ans[i][j] << '""' << (j + 1 == ans[i].size() ? ']' : ',');
        }
        cout << (i + 1 == ans.size() ? ']' : ',');
    }
    cout << '
';
    return 0;
}","import java.io.*;
import java.util.*;","public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        String s = br.readLine();

        Solution sol = new Solution();
        String ans = sol.partition(s);
        System.out.print(ans);
        System.out.println();
    }
}"
76,Palindrome Partitioning II,"Given a string s, partition s such that every substring of the partition is a palindrome.
Return the minimum cuts needed for a palindrome partitioning of s.
Example 1:
Input: s = ""aab""
Output: 1
Explanation: The palindrome partitioning [""aa"",""b""] could be produced using 1 cut.
Example 2:
Input: s = ""a""
Output: 0
Example 3:
Input: s = ""ab""
Output: 1
Constraints:
1 <= s.length <= 2000
s consists of lowercase English letters only.",Hard,"String, Dynamic Programming","Test Case 1:
Input: s = ""aab""
Output: 1
Explanation: The palindrome partitioning [""aa"",""b""] could be produced using 1 cut.

Test Case 2:
Input: s = ""a""
Output: 0

Test Case 3:
Input: s = ""ab""
Output: 1","aab

a

ab","1
0
1","class Solution:
    def minCut(self, s: str) -> int:
        ","class Solution {
public:
    int minCut(string s) {
        
    }
};","class Solution {
    public int minCut(String s) {
        
    }
}","import sys, json, math, itertools, collections","if __name__ == ""__main__"":
    data = sys.stdin.read().strip().splitlines()
    line_idx = 0

    s = data[line_idx]
    line_idx += 1

    sol = Solution()
    ans = sol.minCut(s)

    if isinstance(ans, list):
        print(json.dumps(ans, separators=(',', ':')))
    elif isinstance(ans, bool):
        print('true' if ans else 'false')
    else:
        print(ans)","#include <bits/stdc++.h>
using namespace std;","int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    string s;
    if (!(cin >> s)) return 0;

    Solution sol;
    auto ans = sol.minCut(s);
    cout << ans;
    cout << '\n';
    return 0;
}","import java.io.*;
import java.util.*;","public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        String s = br.readLine();

        Solution sol = new Solution();
        var ans = sol.minCut(s);
        System.out.print(ans);
        System.out.println();
    }
}"
77,Gas Station,"There are n gas stations along a circular route, where the amount of gas at the i th station is gas[i].
You have a car with an unlimited gas tank and it costs cost[i] of gas to travel from the i th station to its next (i + 1) th station. You begin the journey with an empty tank at one of the gas stations.
Given two integer arrays gas and cost, return the starting gas station's index if you can travel around the circuit once in the clockwise direction, otherwise return
-1. If there exists a solution, it is guaranteed to be unique.
Example 1:
Input: gas = [1,2,3,4,5], cost = [3,4,5,1,2]
Output: 3
Explanation:
Start at station 3 (index 3) and fill up with 4 unit of gas. Your tank = 0 + 4 = 4 Travel to station 4. Your tank = 4 - 1 + 5 = 8 Travel to station 0. Your tank = 8 - 2 + 1 = 7 Travel to station 1. Your tank = 7 - 3 + 2 = 6 Travel to station 2. Your tank = 6 - 4 + 3 = 5 Travel to station 3. The cost is 5. Your gas is just enough to travel back to station 3. Therefore, return 3 as the starting index.
Example 2:
Input: gas = [2,3,4], cost = [3,4,3]
Output: -1
Explanation:
You can't start at station 0 or 1, as there is not enough gas to travel to the next station. Let's start at station 2 and fill up with 4 unit of gas. Your tank = 0 + 4 = 4 Travel to station 0. Your tank = 4 - 3 + 2 = 3 Travel to station 1. Your tank = 3 - 3 + 3 = 3 You cannot travel back to station 2, as it requires 4 unit of gas but you only have 3. Therefore, you can't travel around the circuit once no matter where you start.
Constraints:
n == gas.length == cost.length
1 <= n <= 10^5
0 <= gas[i], cost[i] <= 10^4
The input is generated such that the answer is unique.",Medium,"Array, Greedy","Test Case 1:
Input: gas = [1,2,3,4,5], cost = [3,4,5,1,2]
Output: 3
Explanation:
Start at station 3 (index 3) and fill up with 4 unit of gas. Your tank = 0 + 4 = 4
Travel to station 4. Your tank = 4 - 1 + 5 = 8
Travel to station 0. Your tank = 8 - 2 + 1 = 7
Travel to station 1. Your tank = 7 - 3 + 2 = 6
Travel to station 2. Your tank = 6 - 4 + 3 = 5
Travel to station 3. The cost is 5. Your gas is just enough to travel back to station 3.
Therefore, return 3 as the starting index.

Test Case 2:
Input: gas = [2,3,4], cost = [3,4,3]
Output: -1
Explanation:
You can't start at station 0 or 1, as there is not enough gas to travel to the next station.
Let's start at station 2 and fill up with 4 unit of gas. Your tank = 0 + 4 = 4
Travel to station 0. Your tank = 4 - 3 + 2 = 3
Travel to station 1. Your tank = 3 - 3 + 3 = 3
You cannot travel back to station 2, as it requires 4 unit of gas but you only have 3.
Therefore, you can't travel around the circuit once no matter where you start.","5
1 2 3 4 5
5
3 4 5 1 2

3
2 3 4
3
3 4 3","3
-1","class Solution:
    def canCompleteCircuit(self, gas: List[int], cost: List[int]) -> int:
        ","class Solution {
public:
    int canCompleteCircuit(vector<int>& gas, vector<int>& cost) {
        
    }
};","class Solution {
    public int canCompleteCircuit(int[] gas, int[] cost) {
        
    }
}","import sys, json, math, itertools, collections","if __name__ == ""__main__"":
    data = sys.stdin.read().strip().splitlines()
    line_idx = 0

    n_gas = int(data[line_idx])
    line_idx += 1
    gas = list(map(int, data[line_idx].split()))
    line_idx += 1
    n_cost = int(data[line_idx])
    line_idx += 1
    cost = list(map(int, data[line_idx].split()))
    line_idx += 1

    sol = Solution()
    ans = sol.canCompleteCircuit(gas, cost)

    if isinstance(ans, list):
        print(json.dumps(ans, separators=(',', ':')))
    elif isinstance(ans, bool):
        print('true' if ans else 'false')
    else:
        print(ans)","#include <bits/stdc++.h>
using namespace std;","int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int n_gas;
    if (!(cin >> n_gas)) return 0;
    vector<int> gas(n_gas);
    for (int i = 0; i < n_gas; ++i) cin >> gas[i];
    int n_cost;
    if (!(cin >> n_cost)) return 0;
    vector<int> cost(n_cost);
    for (int i = 0; i < n_cost; ++i) cin >> cost[i];

    Solution sol;
    auto ans = sol.canCompleteCircuit(gas, cost);
    cout << ans;
    cout << '\n';
    return 0;
}","import java.io.*;
import java.util.*;","public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        int n_gas = Integer.parseInt(br.readLine());
        st = new StringTokenizer(br.readLine());
        int[] gas = new int[n_gas];
        for (int i = 0; i < n_gas; i++) {
            gas[i] = Integer.parseInt(st.nextToken());
        }
        int n_cost = Integer.parseInt(br.readLine());
        st = new StringTokenizer(br.readLine());
        int[] cost = new int[n_cost];
        for (int i = 0; i < n_cost; i++) {
            cost[i] = Integer.parseInt(st.nextToken());
        }

        Solution sol = new Solution();
        var ans = sol.canCompleteCircuit(gas, cost);
        System.out.print(ans);
        System.out.println();
    }
}"
78,Candy,"There are n children standing in a line. Each child is assigned a rating value given in the integer array ratings.
You are giving candies to these children subjected to the following requirements:
Each child must have at least one candy.
Children with a higher rating get more candies than their neighbors.
Return the minimum number of candies you need to have to distribute the candies to the children.
Example 1:
Input: ratings = [1,0,2]
Output: 5
Explanation: You can allocate to the first, second and third child with 2, 1, 2 candies respectively.
Example 2:
Input: ratings = [1,2,2]
Output: 4
Explanation: You can allocate to the first, second and third child with 1, 2, 1 candies respectively. The third child gets 1 candy because it satisfies the above two conditions.
Constraints:
n == ratings.length
1 <= n <= 2 * 10^4
0 <= ratings[i] <= 2 * 10^4",Hard,"Array, Greedy","Test Case 1:
Input: ratings = [1,0,2]
Output: 5
Explanation: You can allocate to the first, second and third child with 2, 1, 2 candies respectively.

Test Case 2:
Input: ratings = [1,2,2]
Output: 4
Explanation: You can allocate to the first, second and third child with 1, 2, 1 candies respectively.
The third child gets 1 candy because it satisfies the above two conditions.","3
1 0 2

3
1 2 2","5
4","class Solution:
    def candy(self, ratings: List[int]) -> int:
        ","class Solution {
public:
    int candy(vector<int>& ratings) {
        
    }
};","class Solution {
    public int candy(int[] ratings) {
        
    }
}","import sys, json, math, itertools, collections","if __name__ == ""__main__"":
    data = sys.stdin.read().strip().splitlines()
    line_idx = 0

    n_ratings = int(data[line_idx])
    line_idx += 1
    ratings = list(map(int, data[line_idx].split()))
    line_idx += 1

    sol = Solution()
    ans = sol.candy(ratings)

    if isinstance(ans, list):
        print(json.dumps(ans, separators=(',', ':')))
    elif isinstance(ans, bool):
        print('true' if ans else 'false')
    else:
        print(ans)","#include <bits/stdc++.h>
using namespace std;","int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int n_ratings;
    if (!(cin >> n_ratings)) return 0;
    vector<int> ratings(n_ratings);
    for (int i = 0; i < n_ratings; ++i) cin >> ratings[i];

    Solution sol;
    auto ans = sol.candy(ratings);
    cout << ans;
    cout << '\n';
    return 0;
}","import java.io.*;
import java.util.*;","public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        int n_ratings = Integer.parseInt(br.readLine());
        st = new StringTokenizer(br.readLine());
        int[] ratings = new int[n_ratings];
        for (int i = 0; i < n_ratings; i++) {
            ratings[i] = Integer.parseInt(st.nextToken());
        }

        Solution sol = new Solution();
        var ans = sol.candy(ratings);
        System.out.print(ans);
        System.out.println();
    }
}"
79,Single Number II,"Given an integer array nums where every element appears three times except for one, which appears exactly once. Find the single element and return it.
You must implement a solution with a linear runtime complexity and use only constant extra space.
Example 1:
Input: nums = [2,2,3,2]
Output: 3
Example 2:
Input: nums = [0,1,0,1,0,1,99]
Output: 99
Constraints:
1 <= nums.length <= 3 * 10^4
-2^31 <= nums[i] <= 2^31 - 1
Each element in nums appears exactly three times except for one element which appears once.",Medium,"Array, Bit Manipulation","Test Case 1:
Input: nums = [2,2,3,2]
Output: 3

Test Case 2:
Input: nums = [0,1,0,1,0,1,99]
Output: 99","4
2 2 3 2

7
0 1 0 1 0 1 99","3
99","class Solution:
    def singleNumber(self, nums: List[int]) -> int:
        ","class Solution {
public:
    int singleNumber(vector<int>& nums) {
        
    }
};","class Solution {
    public int singleNumber(int[] nums) {
        
    }
}","import sys, json, math, itertools, collections","if __name__ == ""__main__"":
    data = sys.stdin.read().strip().splitlines()
    line_idx = 0

    n_nums = int(data[line_idx])
    line_idx += 1
    nums = list(map(int, data[line_idx].split()))
    line_idx += 1

    sol = Solution()
    ans = sol.singleNumber(nums)

    if isinstance(ans, list):
        print(json.dumps(ans, separators=(',', ':')))
    elif isinstance(ans, bool):
        print('true' if ans else 'false')
    else:
        print(ans)","#include <bits/stdc++.h>
using namespace std;","int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int n_nums;
    if (!(cin >> n_nums)) return 0;
    vector<int> nums(n_nums);
    for (int i = 0; i < n_nums; ++i) cin >> nums[i];

    Solution sol;
    auto ans = sol.singleNumber(nums);
    cout << ans;
    cout << '\n';
    return 0;
}","import java.io.*;
import java.util.*;","public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        int n_nums = Integer.parseInt(br.readLine());
        st = new StringTokenizer(br.readLine());
        int[] nums = new int[n_nums];
        for (int i = 0; i < n_nums; i++) {
            nums[i] = Integer.parseInt(st.nextToken());
        }

        Solution sol = new Solution();
        var ans = sol.singleNumber(nums);
        System.out.print(ans);
        System.out.println();
    }
}"
80,Word Break,"Given a string s and a dictionary of strings wordDict, return true if s can be segmented into a space-separated sequence of one or more dictionary words.
Note that the same word in the dictionary may be reused multiple times in the segmentation.
Example 1:
Input: s = ""leetcode"", wordDict = [""leet"",""code""]
Output: true
Explanation: Return true because ""leetcode"" can be segmented as ""leet code"".
Example 2:
Input: s = ""applepenapple"", wordDict = [""apple"",""pen""]
Output: true
Explanation: Return true because ""applepenapple"" can be segmented as ""apple pen apple"". Note that you are allowed to reuse a dictionary word.
Example 3:
Input: s = ""catsandog"", wordDict = [""cats"",""dog"",""sand"",""and"",""cat""]
Output: false
Constraints:
1 <= s.length <= 300
1 <= wordDict.length <= 1000
1 <= wordDict[i].length <= 20
s and wordDict[i] consist of only lowercase English letters.
All the strings of wordDict are unique.",Medium,"Array, Hash Table, String, Dynamic Programming, Trie, Memoization","Test Case 1:
Input: s = ""leetcode"", wordDict = [""leet"",""code""]
Output: true
Explanation: Return true because ""leetcode"" can be segmented as ""leet code"".

Test Case 2:
Input: s = ""applepenapple"", wordDict = [""apple"",""pen""]
Output: true
Explanation: Return true because ""applepenapple"" can be segmented as ""apple pen apple"".
Note that you are allowed to reuse a dictionary word.

Test Case 3:
Input: s = ""catsandog"", wordDict = [""cats"",""dog"",""sand"",""and"",""cat""]
Output: false","leetcode
[""leet"",""code""]

applepenapple
[""apple"",""pen""]

catsandog
[""cats"",""dog"",""sand"",""and"",""cat""]","true
true
false","class Solution:
    def wordBreak(self, s: str, wordDict: List[str]) -> bool:
        ","class Solution {
public:
    bool wordBreak(string s, vector<string>& wordDict) {
        
    }
};","class Solution {
    public boolean wordBreak(String s, List<String> wordDict) {
        
    }
}","import sys, json, math, itertools, collections","if __name__ == ""__main__"":
    data = sys.stdin.read().strip().splitlines()
    line_idx = 0

    s = data[line_idx]
    line_idx += 1
    wordDict = data[line_idx]
    line_idx += 1

    sol = Solution()
    ans = sol.wordBreak(s, wordDict)

    if isinstance(ans, list):
        print(json.dumps(ans, separators=(',', ':')))
    elif isinstance(ans, bool):
        print('true' if ans else 'false')
    else:
        print(ans)","#include <bits/stdc++.h>
using namespace std;","int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    string s;
    if (!(cin >> s)) return 0;
    string wordDict;
    if (!(cin >> wordDict)) return 0;

    Solution sol;
    bool ans = sol.wordBreak(s, wordDict);
    cout << (ans ? ""true"" : ""false"");
    cout << '\n';
    return 0;
}","import java.io.*;
import java.util.*;","public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        String s = br.readLine();
        String wordDict = br.readLine();

        Solution sol = new Solution();
        boolean ans = sol.wordBreak(s, wordDict);
        System.out.print(ans ? ""true"" : ""false"");
        System.out.println();
    }
}"
81,Word Break II,"Given a string s and a dictionary of strings wordDict, add spaces in s to construct a sentence where each word is a valid dictionary word. Return all such possible sentences in any order.
Note that the same word in the dictionary may be reused multiple times in the segmentation.
Example 1:
Input: s = ""catsanddog"", wordDict = [""cat"",""cats"",""and"",""sand"",""dog""]
Output: [""cats and dog"",""cat sand dog""]
Example 2:
Input: s = ""pineapplepenapple"", wordDict = [""apple"",""pen"",""applepen"",""pine"",""pineapple""]
Output: [""pine apple pen apple"",""pineapple pen apple"",""pine applepen apple""]
Explanation: Note that you are allowed to reuse a dictionary word.
Example 3:
Input: s = ""catsandog"", wordDict = [""cats"",""dog"",""sand"",""and"",""cat""]
Output: []
Constraints:
1 <= s.length <= 20
1 <= wordDict.length <= 1000
1 <= wordDict[i].length <= 10
s and wordDict[i] consist of only lowercase English letters.
All the strings of wordDict are unique.
Input is generated in a way that the length of the answer doesn't exceed 10^5.",Hard,"Array, Hash Table, String, Dynamic Programming, Backtracking, Trie, Memoization","Test Case 1:
Input: s = ""catsanddog"", wordDict = [""cat"",""cats"",""and"",""sand"",""dog""]
Output: [""cats and dog"",""cat sand dog""]

Test Case 2:
Input: s = ""pineapplepenapple"", wordDict = [""apple"",""pen"",""applepen"",""pine"",""pineapple""]
Output: [""pine apple pen apple"",""pineapple pen apple"",""pine applepen apple""]
Explanation: Note that you are allowed to reuse a dictionary word.

Test Case 3:
Input: s = ""catsandog"", wordDict = [""cats"",""dog"",""sand"",""and"",""cat""]
Output: []","catsanddog
[""cat"",""cats"",""and"",""sand"",""dog""]

pineapplepenapple
[""apple"",""pen"",""applepen"",""pine"",""pineapple""]

catsandog
[""cats"",""dog"",""sand"",""and"",""cat""]","[""cats and dog"",""cat sand dog""]
[""pine apple pen apple"",""pineapple pen apple"",""pine applepen apple""]
[]","class Solution:
    def wordBreak(self, s: str, wordDict: List[str]) -> List[str]:
        ","class Solution {
public:
    vector<string> wordBreak(string s, vector<string>& wordDict) {
        
    }
};","class Solution {
    public List<String> wordBreak(String s, List<String> wordDict) {
        
    }
}","import sys, json, math, itertools, collections","if __name__ == ""__main__"":
    data = sys.stdin.read().strip().splitlines()
    line_idx = 0

    s = data[line_idx]
    line_idx += 1
    wordDict = data[line_idx]
    line_idx += 1

    sol = Solution()
    ans = sol.wordBreak(s, wordDict)

    if isinstance(ans, list):
        print(json.dumps(ans, separators=(',', ':')))
    elif isinstance(ans, bool):
        print('true' if ans else 'false')
    else:
        print(ans)","#include <bits/stdc++.h>
using namespace std;","int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    string s;
    if (!(cin >> s)) return 0;

    Solution sol;
    vector<string> ans = sol.wordBreak(s);

    cout << '[';
    for (size_t i = 0; i < ans.size(); ++i) {
        cout << '""' << ans[i] << '""' << (i + 1 == ans.size() ? ']' : ',');
    }
    cout << '
';
    return 0;
}","import java.io.*;
import java.util.*;","public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        String s = br.readLine();
        String wordDict = br.readLine();

        Solution sol = new Solution();
        String ans = sol.wordBreak(s, wordDict);
        System.out.print(ans);
        System.out.println();
    }
}"
82,Max Points on a Line,"Given an array of points where points[i] = [x[i], y[i] ] represents a point on the X-Y plane, return the maximum number of points that lie on the same straight line.
Example 1:
Input: points = [[1,1],[2,2],[3,3]]
Output: 3
Example 2:
Input: points = [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]
Output: 4
Constraints:
1 <= points.length <= 300
points[i].length == 2
-10^4 <= x[i], y[i] <= 10^4
All the points are unique.",Hard,"Array, Hash Table, Math, Geometry","Test Case 1:
Input: points = [[1,1],[2,2],[3,3]]
Output: 3

Test Case 2:
Input: points = [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]
Output: 4","3 2
1 1
2 2
3 3

6 2
1 1
3 2
5 3
4 1
2 3
1 4","3
4","class Solution:
    def maxPoints(self, points: List[List[int]]) -> int:
        ","class Solution {
public:
    int maxPoints(vector<vector<int>>& points) {
        
    }
};","class Solution {
    public int maxPoints(int[][] points) {
        
    }
}","import sys, json, math, itertools, collections","if __name__ == ""__main__"":
    data = sys.stdin.read().strip().splitlines()
    line_idx = 0

    n_points = int(data[line_idx])
    line_idx += 1
    points = list(map(int, data[line_idx].split()))
    line_idx += 1

    sol = Solution()
    ans = sol.maxPoints(points)

    if isinstance(ans, list):
        print(json.dumps(ans, separators=(',', ':')))
    elif isinstance(ans, bool):
        print('true' if ans else 'false')
    else:
        print(ans)","#include <bits/stdc++.h>
using namespace std;","int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int m_points, n_points;
    if (!(cin >> m_points >> n_points)) return 0;
    vector<vector<int>> points(m_points, vector<int>(n_points));
    for (int i = 0; i < m_points; ++i) {
        for (int j = 0; j < n_points; ++j) {
            cin >> points[i][j];
        }
    }

    Solution sol;
    auto ans = sol.maxPoints(points);
    cout << ans;
    cout << '\n';
    return 0;
}","import java.io.*;
import java.util.*;","public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        int n_points = Integer.parseInt(br.readLine());
        st = new StringTokenizer(br.readLine());
        int[] points = new int[n_points];
        for (int i = 0; i < n_points; i++) {
            points[i] = Integer.parseInt(st.nextToken());
        }

        Solution sol = new Solution();
        var ans = sol.maxPoints(points);
        System.out.print(ans);
        System.out.println();
    }
}"
83,Evaluate Reverse Polish Notation,"You are given an array of strings tokens that represents an arithmetic expression in a Reverse Polish Notation.
Evaluate the expression. Return an integer that represents the value of the expression.
Note that:
The valid operators are '+', '-', '*', and '/'.
Each operand may be an integer or another expression.
The division between two integers always truncates toward zero.
There will not be any division by zero.
The input represents a valid arithmetic expression in a reverse polish notation.
The answer and all the intermediate calculations can be represented in a 32-bit integer.
Example 1:
Input: tokens = [""2"",""1"",""+"",""3"",""*""]
Output: 9
Explanation: ((2 + 1) * 3) = 9
Example 2:
Input: tokens = [""4"",""13"",""5"",""/"",""+""]
Output: 6
Explanation: (4 + (13 / 5)) = 6
Example 3:
Input: tokens = [""10"",""6"",""9"",""3"",""+"",""-11"",""*"",""/"",""*"",""17"",""+"",""5"",""+""]
Output: 22
Explanation: 
((10 * (6 / ((9 + 3) * -11))) + 17) + 5 
= ((10 * (6 / (12 * -11))) + 17) + 5 
= ((10 * (6 / -132)) + 17) + 5 
= ((10 * 0) + 17) + 5 
= (0 + 17) + 5 
= 17 + 5 
= 22
Constraints:
1 <= tokens.length <= 10^4
tokens[i] is either an operator: ""+"", ""-"", ""*"", or ""/"", or an integer in the range [-200, 200].",Medium,"Array, Math, Stack","Test Case 1:
Input: tokens = [""2"",""1"",""+"",""3"",""*""]
Output: 9
Explanation: ((2 + 1) * 3) = 9

Test Case 2:
Input: tokens = [""4"",""13"",""5"",""/"",""+""]
Output: 6
Explanation: (4 + (13 / 5)) = 6

Test Case 3:
Input: tokens = [""10"",""6"",""9"",""3"",""+"",""-11"",""*"",""/"",""*"",""17"",""+"",""5"",""+""]
Output: 22
Explanation: ((10 * (6 / ((9 + 3) * -11))) + 17) + 5
= ((10 * (6 / (12 * -11))) + 17) + 5
= ((10 * (6 / -132)) + 17) + 5
= ((10 * 0) + 17) + 5
= (0 + 17) + 5
= 17 + 5
= 22","[""2"",""1"",""+"",""3"",""*""]

[""4"",""13"",""5"",""/"",""+""]

[""10"",""6"",""9"",""3"",""+"",""-11"",""*"",""/"",""*"",""17"",""+"",""5"",""+""]","9
6
22","class Solution:
    def evalRPN(self, tokens: List[str]) -> int:
        ","class Solution {
public:
    int evalRPN(vector<string>& tokens) {
        
    }
};","class Solution {
    public int evalRPN(String[] tokens) {
        
    }
}","import sys, json, math, itertools, collections","if __name__ == ""__main__"":
    data = sys.stdin.read().strip().splitlines()
    line_idx = 0

    tokens = data[line_idx]
    line_idx += 1

    sol = Solution()
    ans = sol.evalRPN(tokens)

    if isinstance(ans, list):
        print(json.dumps(ans, separators=(',', ':')))
    elif isinstance(ans, bool):
        print('true' if ans else 'false')
    else:
        print(ans)","#include <bits/stdc++.h>
using namespace std;","int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    string tokens;
    if (!(cin >> tokens)) return 0;

    Solution sol;
    auto ans = sol.evalRPN(tokens);
    cout << ans;
    cout << '\n';
    return 0;
}","import java.io.*;
import java.util.*;","public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        String tokens = br.readLine();

        Solution sol = new Solution();
        var ans = sol.evalRPN(tokens);
        System.out.print(ans);
        System.out.println();
    }
}"
